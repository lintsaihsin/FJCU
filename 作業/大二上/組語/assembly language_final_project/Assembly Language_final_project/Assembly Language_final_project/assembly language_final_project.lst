Microsoft (R) Macro Assembler Version 14.27.29111.0	    12/29/20 12:56:02
main.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;macros
				; 定位X,Y座標--------------
				mGotoxy MACRO X:REQ, Y:REQ                              
				    PUSH    EDX
				    MOV DH, Y
				    MOV DL, X
				    CALL    Gotoxy
				    POP EDX
				ENDM
				;--------------------------
				; 印出值----------------------------------------
				mWrite MACRO text:REQ                                   
				    LOCAL string
				    .data
				        string BYTE text, 0
				    .code
				        mov al , white + ( black * 16 );改變顏色
				        call SetTextColor

				        PUSH    EDX
				        MOV EDX, OFFSET string
				        CALL    WriteString
				        POP EDX
				ENDM
				;-----------------------------------------------
				;讀取字串----------------
				mReadString MACRO var:REQ                               
				    PUSH    ECX
				    PUSH    EDX
				    MOV EDX, OFFSET var
				    MOV ECX, SIZEOF var
				    CALL    ReadString
				    POP EDX
				    POP ECX
				ENDM
				;------------------------
				;印出字串--------------------------
				mWriteString MACRO buffer:REQ                           
				    mov al , white + ( black * 16 )
				    call SetTextColor

				    PUSH    EDX
				    MOV EDX, OFFSET buffer
				    CALL    WriteString
				    POP EDX
				ENDM
				;----------------------------------
				; Game "Window" Setup:
 = 00000073			    maxX    EQU 115; 設定遊戲範圍
 = 0000001C			    maxY    EQU 28
 = "-----------------------	    wallHor EQU "--------------------------------------------------------------------------------------------------------------------"
   ------------------------
   ------------------------
   ------------------------
   ---------------------"
 = 0000007C			    wallVert    EQU '|'
 = 000000FF			    maxSize EQU 255
				;-----------------------------------

				; Structs:
				;x, y 座標的結構
 00000002			AXIS STRUCT                                             
 00000000  00			    x BYTE 0                                            
 00000001  00			    y BYTE 0
				AXIS ENDS
				;-------------

				;設定上下左右按鍵---------------
 = 00000025			    VK_LEFT     EQU 000000025h                          
 = 00000026			    VK_UP       EQU 000000026h
 = 00000027			    VK_RIGHT    EQU 000000027h
 = 00000028			    VK_DOWN     EQU 000000028h
				;-----------------------------

				; Prototypes:
				GetKeyState PROTO, nVirtKey:DWORD

 00000000			.data
 00000000 00000000		    score dword 0

 00000004 00 00			    foodPoint   AXIS    <0,0>; 食物座標
 00000006  000000FF [		    SnakeBody   AXIS    maxSize DUP(<0,0>) ; 蛇座標
	    00 00
	   ]

 00000204 0000003C		    speed   DWORD   60 ;速度

 00000208 23			    snake       BYTE    '#'
 00000209 00			    choice  BYTE    0
 0000020A  0000000E [		    playerName  BYTE    13 + 1 DUP (?)
	    00
	   ]
				;蛇出生座標----------------
 00000218 28			    currentX    BYTE    40                          
 00000219 0A			    currentY    BYTE    10
				;-------------------------
				;食物形狀---------------------
 0000021A 41			    foodChar0  BYTE   'A'                        
 0000021B 42			    foodChar1  BYTE   'B'
 0000021C 43			    foodChar2  BYTE   'C'
 0000021D 44			    foodChar3  BYTE   'D'
 0000021E 45			    foodChar4  BYTE   'E'
 0000021F 05			    foodnum    BYTE   5
 00000220 00000005		    foodrandomnum    DWORD  5
				;----------------------------
				;頭尾座標的index--------------
 00000224 03			    headIndex       BYTE    3   
 00000225 00			    tailIndex       BYTE    0
				;-----------------------------
				;初始化移動控制----------------
 00000226 00			    LEFT            BYTE    0                       
 00000227 01			    RIGHT           BYTE    1                       
 00000228 00			    UP              BYTE    0
 00000229 00			    DOWN            BYTE    0
				;-----------------------------

 0000022A 79 6F 75 20 65	    wrong byte "you enter the wrong message, try again !",0
	   6E 74 65 72 20
	   74 68 65 20 77
	   72 6F 6E 67 20
	   6D 65 73 73 61
	   67 65 2C 20 74
	   72 79 20 61 67
	   61 69 6E 20 21
	   00
 00000253 4D 61 79 62 65	    again byte "Maybe you can try again !",0
	   20 79 6F 75 20
	   63 61 6E 20 74
	   72 79 20 61 67
	   61 69 6E 20 21
	   00
 0000026D 4D 61 79 62 65	    good  byte "Maybe you can get higher score, haha !",0
	   20 79 6F 75 20
	   63 61 6E 20 67
	   65 74 20 68 69
	   67 68 65 72 20
	   73 63 6F 72 65
	   2C 20 68 61 68
	   61 20 21 00
 00000294 43 6F 6E 67 72	    excellent  byte "Congraduation! You goto high scores !",0
	   61 64 75 61 74
	   69 6F 6E 21 20
	   59 6F 75 20 67
	   6F 74 6F 20 68
	   69 67 68 20 73
	   63 6F 72 65 73
	   20 21 00

 00000000			.code
 00000000			main PROC
 00000000  E8 00000E2C		   call startgame
				   exit
 0000000C			main ENDP
				;方向------------------------
 0000000C			SetDirection PROC, R:BYTE, L:BYTE, U:BYTE, D:BYTE
 0000000F  8A 55 08		    mov dl, R
 00000012  88 15 00000227 R	    mov RIGHT, dl

 00000018  8A 55 0C		    mov dl, L
 0000001B  88 15 00000226 R	    mov LEFT, dl

 00000021  8A 55 10		    mov dl, U
 00000024  88 15 00000228 R	    mov UP, dl

 0000002A  8A 55 14		    mov dl, D
 0000002D  88 15 00000229 R	    mov DOWN, dl
				    
				    ret
 00000037			SetDirection ENDP
				;---------------------------
				;輸入方向--------------------
 00000037			presskey proc
				;press down ?--------------------
 00000037			ddown:
 00000037  B4 00		     MOV AH, 0
				        INVOKE GetKeyState, VK_DOWN                  
				        .if ah == 0 || currentY >= maxY
 0000004D  EB 16		            jmp uup
				    .else
 00000051  FE 05 00000219 R	        inc currentY
				        invoke SetDirection,  0, 0, 0, 1
				    .endif                       
 00000064  C3			     RET
				;--------------------------------
				;press up ?--------------------
 00000065			uup:
 00000065  B4 00		    mov ah, 0
				    invoke  GetKeyState, VK_UP
				    .if ah == 0 || currentY <= 0
 0000007B  EB 16		        jmp lleft
				    .else
 0000007F  FE 0D 00000219 R	        dec currentY
				        invoke SetDirection, 0, 0, 1, 0
				    .endif
 00000092  C3			    ret
				;--------------------------------
				;press left ?--------------------
 00000093			lleft:
 00000093  B4 00		    mov ah, 0
				    invoke  GetKeyState, VK_LEFT
				    .if ah == 0 || currentX <= 0
 000000A9  EB 16		        jmp rright
				    .else
 000000AD  FE 0D 00000218 R	        dec currentX
				        invoke SetDirection, 0, 1, 0, 0
				    .endif
 000000C0  C3			    ret
				;---------------------------------
				;press right ?--------------------
 000000C1			rright:
 000000C1  B4 00		    mov ah, 0
				    invoke  GetKeyState, VK_RIGHT
				    .if ah == 0 || currentY >= maxY
 000000D7  EB 16		        jmp rightpress
				    .else
 000000DB  FE 05 00000218 R	        inc currentX
				        invoke SetDirection, 1, 0, 0, 0
				    .endif
 000000EE  C3			    ret
				;--------------------------------
				;right is press------------------
 000000EF			rightpress:
				    .if RIGHT == 0 || currentX >=  maxX
 00000101  EB 08		        jmp leftpress
				    .else
 00000105  FE 05 00000218 R	        inc currentX
				    .endif
				;--------------------------------
				;left is press------------------
 0000010B			leftpress:
				    .if LEFT == 0 || currentX <=  0
 0000011D  EB 08		        jmp uppress
				    .else
 00000121  FE 0D 00000218 R	        dec currentX
				    .endif
				;--------------------------------
				;up is press------------------
 00000127			uppress:
				    .if UP == 0 || currentY <=  0
 00000139  EB 08		        jmp downpress
				    .else
 0000013D  FE 0D 00000219 R	        dec currentY
				    .endif
				;--------------------------------
				;down is press------------------
 00000143			downpress:
				    .if DOWN == 0 || currentY >=  maxY
 00000155  EB 08		        jmp breakk
				    .else
 00000159  FE 05 00000219 R	        inc currentY
				    .endif
				;--------------------------------
 0000015F			breakk:
 0000015F  C3			    ret 
 00000160			presskey endp
				;---------------------------
				;增長------------------------
 00000160			grow proc
				    ;判斷是否有吃到食物
 00000160  8A 25 00000218 R	    mov ah, currentX
 00000166  A0 00000219 R	    mov al, currentY
				    .if ah == FoodPoint.x && al ==  FoodPoint.y
				        .if foodrandomnum == 0
 0000018C  C6 05 0000021F R	            mov foodnum, 0
	   00
 00000193  E8 00000BB8		            call createfood ;產生新的食物
 00000198  FE 05 00000224 R	            inc headIndex   ;增加蛇的長度
 0000019E  FF 05 00000000 R	            inc score
				        .elseif foodrandomnum == 1
 000001B2  C6 05 0000021F R	            mov foodnum, 1
	   01
 000001B9  E8 00000B92		            call createfood ;產生新的食物
 000001BE  FE 05 00000224 R	            inc headIndex   ;增加蛇的長度
 000001C4  FF 05 00000000 R	            inc score
				        .elseif foodrandomnum == 2
 000001D5  C6 05 0000021F R	            mov foodnum, 2
	   02
 000001DC  E8 00000B6F		            call createfood ;產生新的食物
 000001E1  FE 05 00000224 R	            inc headIndex   ;增加蛇的長度
 000001E7  FF 05 00000000 R	            inc score
				        .elseif foodrandomnum == 3
 000001F8  C6 05 0000021F R	            mov foodnum, 3
	   03
 000001FF  E8 00000B4C		            call createfood ;產生新的食物
 00000204  FE 05 00000224 R	            inc headIndex   ;增加蛇的長度
 0000020A  FF 05 00000000 R	            inc score
				        .elseif foodrandomnum == 4
 0000021B  C6 05 0000021F R	            mov foodnum, 4
	   04
 00000222  E8 00000B29		            call createfood ;產生新的食物
 00000227  FE 05 00000224 R	            inc headIndex   ;增加蛇的長度
 0000022D  FF 05 00000000 R	            inc score
				        .endif
				    .endif
 00000233  C3			    ret
 00000234			grow endp
				;---------------------------
				;畫出牆---------------------
 00000234			PrintWalls PROC        
				    mGotoxy 0, 1     
 00000234  52		     1	    PUSH    EDX
 00000235  B6 01	     1	    MOV DH, 1
 00000237  B2 00	     1	    MOV DL, 0
 00000239  E8 00000000 E     1	    CALL    Gotoxy
 0000023E  5A		     1	    POP EDX
				    mWrite  wallHor
 000002BA		     1	    .data
 000002BA 2D 2D 2D 2D 2D     1	        ??0000 BYTE wallHor, 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 00
 0000023F		     1	    .code
 0000023F  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000241  E8 00000000 E     1	        call SetTextColor
 00000246  52		     1	        PUSH    EDX
 00000247  BA 000002BA R     1	        MOV EDX, OFFSET ??0000
 0000024C  E8 00000000 E     1	        CALL    WriteString
 00000251  5A		     1	        POP EDX
				    mGotoxy 0, maxY                                     
 00000252  52		     1	    PUSH    EDX
 00000253  B6 1C	     1	    MOV DH, maxY
 00000255  B2 00	     1	    MOV DL, 0
 00000257  E8 00000000 E     1	    CALL    Gotoxy
 0000025C  5A		     1	    POP EDX
				    mWrite  wallHor    
 0000032F		     1	    .data
 0000032F 2D 2D 2D 2D 2D     1	        ??0001 BYTE wallHor, 0
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 00
 0000025D		     1	    .code
 0000025D  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000025F  E8 00000000 E     1	        call SetTextColor
 00000264  52		     1	        PUSH    EDX
 00000265  BA 0000032F R     1	        MOV EDX, OFFSET ??0001
 0000026A  E8 00000000 E     1	        CALL    WriteString
 0000026F  5A		     1	        POP EDX
 00000270  B1 1B		    mov cl, maxY - 1                                    
				    
 00000272			X00:
 00000272  80 F9 01		    cmp cl, 1                                           
 00000275  74 40		    je  X01                                             
				        mGotoxy 0, CL                                   
 00000277  52		     1	    PUSH    EDX
 00000278  8A F1	     1	    MOV DH, CL
 0000027A  B2 00	     1	    MOV DL, 0
 0000027C  E8 00000000 E     1	    CALL    Gotoxy
 00000281  5A		     1	    POP EDX
				        mWrite  wallVert                                
 000003A4		     1	    .data
 000003A4 7C 00		     1	        ??0002 BYTE wallVert, 0
 00000282		     1	    .code
 00000282  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000284  E8 00000000 E     1	        call SetTextColor
 00000289  52		     1	        PUSH    EDX
 0000028A  BA 000003A4 R     1	        MOV EDX, OFFSET ??0002
 0000028F  E8 00000000 E     1	        CALL    WriteString
 00000294  5A		     1	        POP EDX
				        mGotoxy maxX, CL
 00000295  52		     1	    PUSH    EDX
 00000296  8A F1	     1	    MOV DH, CL
 00000298  B2 73	     1	    MOV DL, maxX
 0000029A  E8 00000000 E     1	    CALL    Gotoxy
 0000029F  5A		     1	    POP EDX
				        mWrite  wallVert                                
 000003A6		     1	    .data
 000003A6 7C 00		     1	        ??0003 BYTE wallVert, 0
 000002A0		     1	    .code
 000002A0  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000002A2  E8 00000000 E     1	        call SetTextColor
 000002A7  52		     1	        PUSH    EDX
 000002A8  BA 000003A6 R     1	        MOV EDX, OFFSET ??0003
 000002AD  E8 00000000 E     1	        CALL    WriteString
 000002B2  5A		     1	        POP EDX
 000002B3  FE C9		        dec CL                                          
 000002B5  EB BB		    jmp X00                                             

 000002B7			X01:
 000002B7  C3			    ret
 000002B8			PrintWalls ENDP
				;---------------------------
				;撞牆?----------------------
 000002B8			IsCollision proc
				;是否碰到邊界----------------------
				    .if currentX == 0                ;left
 000002C1  EB 2B		        jmp L1
				    .elseif currentY == 1    ;up
 000002CE  EB 1E		        jmp L1
				    .elseif currentX == maxX ;right
 000002DB  EB 11		        jmp L1
				    .elseif currentY == maxY ;down
 000002E8  EB 04		        jmp L1
				    .else 
 000002EC  EB 06		        jmp L2
				    .endif
				;---------------------------------
				;gameover?------------------------
 000002EE			L1: 
 000002EE  B8 00000001		    mov eax, 1
 000002F3  C3			    ret
 000002F4			L2: 
 000002F4  B8 00000000		    mov eax, 0
 000002F9  C3			    ret
				;---------------------------------
 000002FA			IsCollision endp
				;---------------------------
				;move蛇---------------------
 000002FA			movesnake proc
 000002FA  B9 00000000		    mov ecx, 0
 000002FF  8A 0D 00000224 R	    mov cl, headIndex ;snake's head
				;load x and y----------------
 00000305  A0 00000218 R	    mov al, currentX
 0000030A  8A 25 00000219 R	    mov ah, currentY
				;----------------------------
				;load new x, y for snake new body
 00000310  88 04 4D		    mov Snakebody[2 * ecx].x, al
	   00000006 R
 00000317  88 24 4D		    mov Snakebody[2 * ecx].y, ah
	   00000007 R
				;--------------------------------
				    mGotoxy Snakebody[2 * ecx].x, Snakebody[2 * ecx].y
 0000031E  52		     1	    PUSH    EDX
 0000031F  8A 34 4D	     1	    MOV DH, Snakebody[2 * ecx].y
	   00000007 R
 00000326  8A 14 4D	     1	    MOV DL, Snakebody[2 * ecx].x
	   00000006 R
 0000032D  E8 00000000 E     1	    CALL    Gotoxy
 00000332  5A		     1	    POP EDX
				;snake body---------------------
				    .if foodnum == 0
 0000033C  A0 0000021A R	        mov al, foodChar0
				    .elseif foodnum == 1
 0000034C  A0 0000021B R	        mov al, foodChar1
				    .elseif foodnum == 2
 0000035C  A0 0000021C R	        mov al, foodChar2
				    .elseif foodnum == 3
 0000036C  A0 0000021D R	        mov al, foodChar3
				    .elseif foodnum == 4
 0000037C  A0 0000021E R	        mov al, foodChar4
				    .else 
 00000383  A0 00000208 R	        mov al, snake
				    .endif
 00000388  E8 00000000 E	    call writeChar
				    INVOKE  Sleep, speed
				;-------------------------------
 00000398  B9 00000000		    mov ecx, 0  
 0000039D  8A 0D 00000225 R	    mov cl, tailIndex
 000003A3  80 3C 4D		    cmp SnakeBody[2 * ecx].x, 0;貪食蛇的尾巴位置印出
	   00000006 R 00
 000003AB  74 28		    JE  L1 
				    mGotoxy SnakeBody[2 * ecx].x, SnakeBody[2 * ecx].y
 000003AD  52		     1	    PUSH    EDX
 000003AE  8A 34 4D	     1	    MOV DH, SnakeBody[2 * ecx].y
	   00000007 R
 000003B5  8A 14 4D	     1	    MOV DL, SnakeBody[2 * ecx].x
	   00000006 R
 000003BC  E8 00000000 E     1	    CALL    Gotoxy
 000003C1  5A		     1	    POP EDX
				    mWrite  " "
 000003A8		     1	    .data
 000003A8 20 00		     1	        ??0004 BYTE " ", 0
 000003C2		     1	    .code
 000003C2  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000003C4  E8 00000000 E     1	        call SetTextColor
 000003C9  52		     1	        PUSH    EDX
 000003CA  BA 000003A8 R     1	        MOV EDX, OFFSET ??0004
 000003CF  E8 00000000 E     1	        CALL    WriteString
 000003D4  5A		     1	        POP EDX
				    
 000003D5			L1:
 000003D5  FE 05 00000225 R	    inc tailIndex
 000003DB  FE 05 00000224 R	    inc headIndex
 000003E1  80 3D 00000225 R	    cmp tailIndex, maxSize
	   FF
 000003E8  75 07		    jne L2
 000003EA  C6 05 00000225 R	    mov tailIndex, 0
	   00

 000003F1			L2:
 000003F1  80 3D 00000224 R	    cmp headIndex, maxSize ; 讀取當前貪食蛇最大長度
	   FF
 000003F8  75 07		    jne L3
 000003FA  C6 05 00000224 R	    mov headIndex, 0
	   00

 00000401			L3:
 00000401  C3			    ret
 00000402			movesnake endp
				;---------------------------
				;顯示玩家資訊----------------
 00000402			drawHUD PROC                                            
				;玩家名----------------------------                                                                                                    
				    mGotoxy 2, 0
 00000402  52		     1	    PUSH    EDX
 00000403  B6 00	     1	    MOV DH, 0
 00000405  B2 02	     1	    MOV DL, 2
 00000407  E8 00000000 E     1	    CALL    Gotoxy
 0000040C  5A		     1	    POP EDX
				    mWrite  "Name: "
 000003AA		     1	    .data
 000003AA 4E 61 6D 65 3A     1	        ??0005 BYTE "Name: ", 0
	   20 00
 0000040D		     1	    .code
 0000040D  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000040F  E8 00000000 E     1	        call SetTextColor
 00000414  52		     1	        PUSH    EDX
 00000415  BA 000003AA R     1	        MOV EDX, OFFSET ??0005
 0000041A  E8 00000000 E     1	        CALL    WriteString
 0000041F  5A		     1	        POP EDX
				    mWriteString offset playerName 
 00000420  B0 0F	     1	    mov al , white + ( black * 16 )
 00000422  E8 00000000 E     1	    call SetTextColor
 00000427  52		     1	    PUSH    EDX
 00000428  BA 0000020A R     1	    MOV EDX, OFFSET offset playerName
 0000042D  E8 00000000 E     1	    CALL    WriteString
 00000432  5A		     1	    POP EDX
				;----------------------------------
				;難易度----------------------------
				    mGotoxy 20, 0
 00000433  52		     1	    PUSH    EDX
 00000434  B6 00	     1	    MOV DH, 0
 00000436  B2 14	     1	    MOV DL, 20
 00000438  E8 00000000 E     1	    CALL    Gotoxy
 0000043D  5A		     1	    POP EDX
				    mWrite "Level: "
 000003B1		     1	    .data
 000003B1 4C 65 76 65 6C     1	        ??0006 BYTE "Level: ", 0
	   3A 20 00
 0000043E		     1	    .code
 0000043E  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000440  E8 00000000 E     1	        call SetTextColor
 00000445  52		     1	        PUSH    EDX
 00000446  BA 000003B1 R     1	        MOV EDX, OFFSET ??0006
 0000044B  E8 00000000 E     1	        CALL    WriteString
 00000450  5A		     1	        POP EDX
				    .if choice == '0'
				        mWrite "Easy"

 000003B9		     1	    .data
 000003B9 45 61 73 79 00     1	        ??0007 BYTE "Easy", 0
 0000045A		     1	    .code
 0000045A  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000045C  E8 00000000 E     1	        call SetTextColor
 00000461  52		     1	        PUSH    EDX
 00000462  BA 000003B9 R     1	        MOV EDX, OFFSET ??0007
 00000467  E8 00000000 E     1	        CALL    WriteString
 0000046C  5A		     1	        POP EDX
				    .elseif choice == '1'
				        mWrite "Normal"
 000003BE		     1	    .data
 000003BE 4E 6F 72 6D 61     1	        ??0008 BYTE "Normal", 0
	   6C 00
 00000478		     1	    .code
 00000478  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000047A  E8 00000000 E     1	        call SetTextColor
 0000047F  52		     1	        PUSH    EDX
 00000480  BA 000003BE R     1	        MOV EDX, OFFSET ??0008
 00000485  E8 00000000 E     1	        CALL    WriteString
 0000048A  5A		     1	        POP EDX
				    .elseif choice == '2'
				        mWrite "Medium"
 000003C5		     1	    .data
 000003C5 4D 65 64 69 75     1	        ??0009 BYTE "Medium", 0
	   6D 00
 00000496		     1	    .code
 00000496  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000498  E8 00000000 E     1	        call SetTextColor
 0000049D  52		     1	        PUSH    EDX
 0000049E  BA 000003C5 R     1	        MOV EDX, OFFSET ??0009
 000004A3  E8 00000000 E     1	        CALL    WriteString
 000004A8  5A		     1	        POP EDX
				    .else
				        mWrite "Hard"
 000003CC		     1	    .data
 000003CC 48 61 72 64 00     1	        ??000A BYTE "Hard", 0
 000004AB		     1	    .code
 000004AB  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000004AD  E8 00000000 E     1	        call SetTextColor
 000004B2  52		     1	        PUSH    EDX
 000004B3  BA 000003CC R     1	        MOV EDX, OFFSET ??000A
 000004B8  E8 00000000 E     1	        CALL    WriteString
 000004BD  5A		     1	        POP EDX
				    .endif
				    mGotoxy 40, 0
 000004BE  52		     1	    PUSH    EDX
 000004BF  B6 00	     1	    MOV DH, 0
 000004C1  B2 28	     1	    MOV DL, 40
 000004C3  E8 00000000 E     1	    CALL    Gotoxy
 000004C8  5A		     1	    POP EDX
				    mWrite "Score: "
 000003D1		     1	    .data
 000003D1 53 63 6F 72 65     1	        ??000B BYTE "Score: ", 0
	   3A 20 00
 000004C9		     1	    .code
 000004C9  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000004CB  E8 00000000 E     1	        call SetTextColor
 000004D0  52		     1	        PUSH    EDX
 000004D1  BA 000003D1 R     1	        MOV EDX, OFFSET ??000B
 000004D6  E8 00000000 E     1	        CALL    WriteString
 000004DB  5A		     1	        POP EDX
 000004DC  A1 00000000 R	    mov eax, score
 000004E1  E8 00000000 E	    call writedec
				;-----------------------------------
 000004E6  C3			    ret
 000004E7			drawHUD ENDP
				;----------------------------
 000004E7			DrawFirstScreen PROC
 000004E7  E8 00000000 E	    CALL    ClrScr
 000004EC  E8 FFFFFD43		    CALL    PrintWalls
				        
				    mGotoxy 28, 3                                       
 000004F1  52		     1	    PUSH    EDX
 000004F2  B6 03	     1	    MOV DH, 3
 000004F4  B2 1C	     1	    MOV DL, 28
 000004F6  E8 00000000 E     1	    CALL    Gotoxy
 000004FB  5A		     1	    POP EDX
				    mWrite  "            _____          _____   ____   __    __ ______"
 000003D9		     1	    .data
 000003D9 20 20 20 20 20     1	        ??000C BYTE "            _____          _____   ____   __    __ ______", 0
	   20 20 20 20 20
	   20 20 5F 5F 5F
	   5F 5F 20 20 20
	   20 20 20 20 20
	   20 20 5F 5F 5F
	   5F 5F 20 20 20
	   5F 5F 5F 5F 20
	   20 20 5F 5F 20
	   20 20 20 5F 5F
	   20 5F 5F 5F 5F
	   5F 5F 00
 000004FC		     1	    .code
 000004FC  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000004FE  E8 00000000 E     1	        call SetTextColor
 00000503  52		     1	        PUSH    EDX
 00000504  BA 000003D9 R     1	        MOV EDX, OFFSET ??000C
 00000509  E8 00000000 E     1	        CALL    WriteString
 0000050E  5A		     1	        POP EDX
				    mGotoxy 28, 4                                       
 0000050F  52		     1	    PUSH    EDX
 00000510  B6 04	     1	    MOV DH, 4
 00000512  B2 1C	     1	    MOV DL, 28
 00000514  E8 00000000 E     1	    CALL    Gotoxy
 00000519  5A		     1	    POP EDX
				    mWrite  "|        | |       |      /       /    \  | \  / | |     "   
 00000413		     1	    .data
 00000413 7C 20 20 20 20     1	        ??000D BYTE "|        | |       |      /       /    \  | \  / | |     ", 0
	   20 20 20 20 7C
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 2F 20 20 20
	   20 20 20 20 2F
	   20 20 20 20 5C
	   20 20 7C 20 5C
	   20 20 2F 20 7C
	   20 7C 20 20 20
	   20 20 00
 0000051A		     1	    .code
 0000051A  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000051C  E8 00000000 E     1	        call SetTextColor
 00000521  52		     1	        PUSH    EDX
 00000522  BA 00000413 R     1	        MOV EDX, OFFSET ??000D
 00000527  E8 00000000 E     1	        CALL    WriteString
 0000052C  5A		     1	        POP EDX
				    mGotoxy 28, 5 
 0000052D  52		     1	    PUSH    EDX
 0000052E  B6 05	     1	    MOV DH, 5
 00000530  B2 1C	     1	    MOV DL, 28
 00000532  E8 00000000 E     1	    CALL    Gotoxy
 00000537  5A		     1	    POP EDX
				    mWrite  "|        | |       |      |       |    |  |  \/  | |"
 0000044D		     1	    .data
 0000044D 7C 20 20 20 20     1	        ??000E BYTE "|        | |       |      |       |    |  |  \/  | |", 0
	   20 20 20 20 7C
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 7C
	   20 20 7C 20 20
	   5C 2F 20 20 7C
	   20 7C 00
 00000538		     1	    .code
 00000538  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000053A  E8 00000000 E     1	        call SetTextColor
 0000053F  52		     1	        PUSH    EDX
 00000540  BA 0000044D R     1	        MOV EDX, OFFSET ??000E
 00000545  E8 00000000 E     1	        CALL    WriteString
 0000054A  5A		     1	        POP EDX
				    mGotoxy 28, 6
 0000054B  52		     1	    PUSH    EDX
 0000054C  B6 06	     1	    MOV DH, 6
 0000054E  B2 1C	     1	    MOV DL, 28
 00000550  E8 00000000 E     1	    CALL    Gotoxy
 00000555  5A		     1	    POP EDX
				    mWrite  "|   /\   | |_____  |      |       |    |  |      | |_____ "
 00000482		     1	    .data
 00000482 7C 20 20 20 2F     1	        ??000F BYTE "|   /\   | |_____  |      |       |    |  |      | |_____ ", 0
	   5C 20 20 20 7C
	   20 7C 5F 5F 5F
	   5F 5F 20 20 7C
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 7C
	   20 20 7C 20 20
	   20 20 20 20 7C
	   20 7C 5F 5F 5F
	   5F 5F 20 00
 00000556		     1	    .code
 00000556  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000558  E8 00000000 E     1	        call SetTextColor
 0000055D  52		     1	        PUSH    EDX
 0000055E  BA 00000482 R     1	        MOV EDX, OFFSET ??000F
 00000563  E8 00000000 E     1	        CALL    WriteString
 00000568  5A		     1	        POP EDX
				    mGotoxy 28, 7
 00000569  52		     1	    PUSH    EDX
 0000056A  B6 07	     1	    MOV DH, 7
 0000056C  B2 1C	     1	    MOV DL, 28
 0000056E  E8 00000000 E     1	    CALL    Gotoxy
 00000573  5A		     1	    POP EDX
				    mWrite  "|  /  \  | |       |      |       |    |  |      | |     "
 000004BD		     1	    .data
 000004BD 7C 20 20 2F 20     1	        ??0010 BYTE "|  /  \  | |       |      |       |    |  |      | |     ", 0
	   20 5C 20 20 7C
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 20
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 7C
	   20 20 7C 20 20
	   20 20 20 20 7C
	   20 7C 20 20 20
	   20 20 00
 00000574		     1	    .code
 00000574  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000576  E8 00000000 E     1	        call SetTextColor
 0000057B  52		     1	        PUSH    EDX
 0000057C  BA 000004BD R     1	        MOV EDX, OFFSET ??0010
 00000581  E8 00000000 E     1	        CALL    WriteString
 00000586  5A		     1	        POP EDX
				    mGotoxy 28, 8
 00000587  52		     1	    PUSH    EDX
 00000588  B6 08	     1	    MOV DH, 8
 0000058A  B2 1C	     1	    MOV DL, 28
 0000058C  E8 00000000 E     1	    CALL    Gotoxy
 00000591  5A		     1	    POP EDX
				    mWrite  "\_/    \_/ |_____  |_____ \_____  \____/  |      | |_____ "
 000004F7		     1	    .data
 000004F7 5C 5F 2F 20 20     1	        ??0011 BYTE "\_/    \_/ |_____  |_____ \_____  \____/  |      | |_____ ", 0
	   20 20 5C 5F 2F
	   20 7C 5F 5F 5F
	   5F 5F 20 20 7C
	   5F 5F 5F 5F 5F
	   20 5C 5F 5F 5F
	   5F 5F 20 20 5C
	   5F 5F 5F 5F 2F
	   20 20 7C 20 20
	   20 20 20 20 7C
	   20 7C 5F 5F 5F
	   5F 5F 20 00
 00000592		     1	    .code
 00000592  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000594  E8 00000000 E     1	        call SetTextColor
 00000599  52		     1	        PUSH    EDX
 0000059A  BA 000004F7 R     1	        MOV EDX, OFFSET ??0011
 0000059F  E8 00000000 E     1	        CALL    WriteString
 000005A4  5A		     1	        POP EDX

				    
				    mGotoxy 10, 10                                     
 000005A5  52		     1	    PUSH    EDX
 000005A6  B6 0A	     1	    MOV DH, 10
 000005A8  B2 0A	     1	    MOV DL, 10
 000005AA  E8 00000000 E     1	    CALL    Gotoxy
 000005AF  5A		     1	    POP EDX
				    mWrite  "       \|/                                                                           \|/"   
 00000532		     1	    .data
 00000532 20 20 20 20 20     1	        ??0012 BYTE "       \|/                                                                           \|/", 0
	   20 20 5C 7C 2F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 7C 2F 00
 000005B0		     1	    .code
 000005B0  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000005B2  E8 00000000 E     1	        call SetTextColor
 000005B7  52		     1	        PUSH    EDX
 000005B8  BA 00000532 R     1	        MOV EDX, OFFSET ??0012
 000005BD  E8 00000000 E     1	        CALL    WriteString
 000005C2  5A		     1	        POP EDX
				    mGotoxy 10, 11  
 000005C3  52		     1	    PUSH    EDX
 000005C4  B6 0B	     1	    MOV DH, 11
 000005C6  B2 0A	     1	    MOV DL, 10
 000005C8  E8 00000000 E     1	    CALL    Gotoxy
 000005CD  5A		     1	    POP EDX
				    mWrite  "    ____|______                                                                 ______|_____"
 0000058B		     1	    .data
 0000058B 20 20 20 20 5F     1	        ??0013 BYTE "    ____|______                                                                 ______|_____", 0
	   5F 5F 5F 7C 5F
	   5F 5F 5F 5F 5F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   5F 5F 5F 5F 5F
	   5F 7C 5F 5F 5F
	   5F 5F 00
 000005CE		     1	    .code
 000005CE  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000005D0  E8 00000000 E     1	        call SetTextColor
 000005D5  52		     1	        PUSH    EDX
 000005D6  BA 0000058B R     1	        MOV EDX, OFFSET ??0013
 000005DB  E8 00000000 E     1	        CALL    WriteString
 000005E0  5A		     1	        POP EDX
				    mGotoxy 10, 12
 000005E1  52		     1	    PUSH    EDX
 000005E2  B6 0C	     1	    MOV DH, 12
 000005E4  B2 0A	     1	    MOV DL, 10
 000005E6  E8 00000000 E     1	    CALL    Gotoxy
 000005EB  5A		     1	    POP EDX
				    mWrite  "  /            \                                                               /            \"
 000005E8		     1	    .data
 000005E8 20 20 2F 20 20     1	        ??0014 BYTE "  /            \                                                               /            \", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   5C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 2F
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 5C 00
 000005EC		     1	    .code
 000005EC  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000005EE  E8 00000000 E     1	        call SetTextColor
 000005F3  52		     1	        PUSH    EDX
 000005F4  BA 000005E8 R     1	        MOV EDX, OFFSET ??0014
 000005F9  E8 00000000 E     1	        CALL    WriteString
 000005FE  5A		     1	        POP EDX
				    mGotoxy 10, 13
 000005FF  52		     1	    PUSH    EDX
 00000600  B6 0D	     1	    MOV DH, 13
 00000602  B2 0A	     1	    MOV DL, 10
 00000604  E8 00000000 E     1	    CALL    Gotoxy
 00000609  5A		     1	    POP EDX
				    mWrite  " /              \                                                             /              \"
 00000646		     1	    .data
 00000646 20 2F 20 20 20     1	        ??0015 BYTE " /              \                                                             /              \", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5C 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 2F 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5C 00
 0000060A		     1	    .code
 0000060A  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000060C  E8 00000000 E     1	        call SetTextColor
 00000611  52		     1	        PUSH    EDX
 00000612  BA 00000646 R     1	        MOV EDX, OFFSET ??0015
 00000617  E8 00000000 E     1	        CALL    WriteString
 0000061C  5A		     1	        POP EDX
				    mGotoxy 10, 14
 0000061D  52		     1	    PUSH    EDX
 0000061E  B6 0E	     1	    MOV DH, 14
 00000620  B2 0A	     1	    MOV DL, 10
 00000622  E8 00000000 E     1	    CALL    Gotoxy
 00000627  5A		     1	    POP EDX
				    mWrite  "|                |                                                           |                |"
 000006A5		     1	    .data
 000006A5 7C 20 20 20 20     1	        ??0016 BYTE "|                |                                                           |                |", 0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000628		     1	    .code
 00000628  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000062A  E8 00000000 E     1	        call SetTextColor
 0000062F  52		     1	        PUSH    EDX
 00000630  BA 000006A5 R     1	        MOV EDX, OFFSET ??0016
 00000635  E8 00000000 E     1	        CALL    WriteString
 0000063A  5A		     1	        POP EDX
				    mGotoxy 10, 15
 0000063B  52		     1	    PUSH    EDX
 0000063C  B6 0F	     1	    MOV DH, 15
 0000063E  B2 0A	     1	    MOV DL, 10
 00000640  E8 00000000 E     1	    CALL    Gotoxy
 00000645  5A		     1	    POP EDX
				    mWrite  "|  *****  *****  |                                                           |  *****  *****  |"
 00000705		     1	    .data
 00000705 7C 20 20 2A 2A     1	        ??0017 BYTE "|  *****  *****  |                                                           |  *****  *****  |", 0
	   2A 2A 2A 20 20
	   2A 2A 2A 2A 2A
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   2A 2A 2A 2A 2A
	   20 20 2A 2A 2A
	   2A 2A 20 20 7C
	   00
 00000646		     1	    .code
 00000646  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000648  E8 00000000 E     1	        call SetTextColor
 0000064D  52		     1	        PUSH    EDX
 0000064E  BA 00000705 R     1	        MOV EDX, OFFSET ??0017
 00000653  E8 00000000 E     1	        CALL    WriteString
 00000658  5A		     1	        POP EDX
				    mGotoxy 10, 16
 00000659  52		     1	    PUSH    EDX
 0000065A  B6 10	     1	    MOV DH, 16
 0000065C  B2 0A	     1	    MOV DL, 10
 0000065E  E8 00000000 E     1	    CALL    Gotoxy
 00000663  5A		     1	    POP EDX
				    mWrite  "|    *      *    |                                                           |   *      *     |"
 00000765		     1	    .data
 00000765 7C 20 20 20 20     1	        ??0018 BYTE "|    *      *    |                                                           |   *      *     |", 0
	   2A 20 20 20 20
	   20 20 2A 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 2A 20 20 20
	   20 20 20 2A 20
	   20 20 20 20 7C
	   00
 00000664		     1	    .code
 00000664  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000666  E8 00000000 E     1	        call SetTextColor
 0000066B  52		     1	        PUSH    EDX
 0000066C  BA 00000765 R     1	        MOV EDX, OFFSET ??0018
 00000671  E8 00000000 E     1	        CALL    WriteString
 00000676  5A		     1	        POP EDX
				    mGotoxy 10, 17
 00000677  52		     1	    PUSH    EDX
 00000678  B6 11	     1	    MOV DH, 17
 0000067A  B2 0A	     1	    MOV DL, 10
 0000067C  E8 00000000 E     1	    CALL    Gotoxy
 00000681  5A		     1	    POP EDX
				    mWrite  "|       *        |                                                           |      *         |"
 000007C5		     1	    .data
 000007C5 7C 20 20 20 20     1	        ??0019 BYTE "|       *        |                                                           |      *         |", 0
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 00000682		     1	    .code
 00000682  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000684  E8 00000000 E     1	        call SetTextColor
 00000689  52		     1	        PUSH    EDX
 0000068A  BA 000007C5 R     1	        MOV EDX, OFFSET ??0019
 0000068F  E8 00000000 E     1	        CALL    WriteString
 00000694  5A		     1	        POP EDX
				    mGotoxy 10, 18
 00000695  52		     1	    PUSH    EDX
 00000696  B6 12	     1	    MOV DH, 18
 00000698  B2 0A	     1	    MOV DL, 10
 0000069A  E8 00000000 E     1	    CALL    Gotoxy
 0000069F  5A		     1	    POP EDX
				    mWrite  "|         *      |                                                           |     *          |"
 00000825		     1	    .data
 00000825 7C 20 20 20 20     1	        ??001A BYTE "|         *      |                                                           |     *          |", 0
	   20 20 20 20 20
	   2A 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000006A0		     1	    .code
 000006A0  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000006A2  E8 00000000 E     1	        call SetTextColor
 000006A7  52		     1	        PUSH    EDX
 000006A8  BA 00000825 R     1	        MOV EDX, OFFSET ??001A
 000006AD  E8 00000000 E     1	        CALL    WriteString
 000006B2  5A		     1	        POP EDX
				    mGotoxy 10, 19     
 000006B3  52		     1	    PUSH    EDX
 000006B4  B6 13	     1	    MOV DH, 19
 000006B6  B2 0A	     1	    MOV DL, 10
 000006B8  E8 00000000 E     1	    CALL    Gotoxy
 000006BD  5A		     1	    POP EDX
				    mWrite  "|       *        |                                                           |      *         |"
 00000885		     1	    .data
 00000885 7C 20 20 20 20     1	        ??001B BYTE "|       *        |                                                           |      *         |", 0
	   20 20 20 2A 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 2A
	   20 20 20 20 20
	   20 20 20 20 7C
	   00
 000006BE		     1	    .code
 000006BE  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000006C0  E8 00000000 E     1	        call SetTextColor
 000006C5  52		     1	        PUSH    EDX
 000006C6  BA 00000885 R     1	        MOV EDX, OFFSET ??001B
 000006CB  E8 00000000 E     1	        CALL    WriteString
 000006D0  5A		     1	        POP EDX
				    mGotoxy 10, 20                        
 000006D1  52		     1	    PUSH    EDX
 000006D2  B6 14	     1	    MOV DH, 20
 000006D4  B2 0A	     1	    MOV DL, 10
 000006D6  E8 00000000 E     1	    CALL    Gotoxy
 000006DB  5A		     1	    POP EDX
				    mWrite  "|   **********   |                                                           |   **********   |"
 000008E5		     1	    .data
 000008E5 7C 20 20 20 2A     1	        ??001C BYTE "|   **********   |                                                           |   **********   |", 0
	   2A 2A 2A 2A 2A
	   2A 2A 2A 2A 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 2A 2A 2A 2A
	   2A 2A 2A 2A 2A
	   2A 20 20 20 7C
	   00
 000006DC		     1	    .code
 000006DC  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000006DE  E8 00000000 E     1	        call SetTextColor
 000006E3  52		     1	        PUSH    EDX
 000006E4  BA 000008E5 R     1	        MOV EDX, OFFSET ??001C
 000006E9  E8 00000000 E     1	        CALL    WriteString
 000006EE  5A		     1	        POP EDX
				    mGotoxy 10, 21
 000006EF  52		     1	    PUSH    EDX
 000006F0  B6 15	     1	    MOV DH, 21
 000006F2  B2 0A	     1	    MOV DL, 10
 000006F4  E8 00000000 E     1	    CALL    Gotoxy
 000006F9  5A		     1	    POP EDX
				    mWrite  "|    *      *    |                                                           |    *      *    |"
 00000945		     1	    .data
 00000945 7C 20 20 20 20     1	        ??001D BYTE "|    *      *    |                                                           |    *      *    |", 0
	   2A 20 20 20 20
	   20 20 2A 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 2A 20 20
	   20 20 20 20 2A
	   20 20 20 20 7C
	   00
 000006FA		     1	    .code
 000006FA  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000006FC  E8 00000000 E     1	        call SetTextColor
 00000701  52		     1	        PUSH    EDX
 00000702  BA 00000945 R     1	        MOV EDX, OFFSET ??001D
 00000707  E8 00000000 E     1	        CALL    WriteString
 0000070C  5A		     1	        POP EDX
				    mGotoxy 10, 22
 0000070D  52		     1	    PUSH    EDX
 0000070E  B6 16	     1	    MOV DH, 22
 00000710  B2 0A	     1	    MOV DL, 10
 00000712  E8 00000000 E     1	    CALL    Gotoxy
 00000717  5A		     1	    POP EDX
				    mWrite  "|     ******     |                                                           |     ******     |"
 000009A5		     1	    .data
 000009A5 7C 20 20 20 20     1	        ??001E BYTE "|     ******     |                                                           |     ******     |", 0
	   20 2A 2A 2A 2A
	   2A 2A 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 2A 2A
	   2A 2A 2A 2A 20
	   20 20 20 20 7C
	   00
 00000718		     1	    .code
 00000718  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000071A  E8 00000000 E     1	        call SetTextColor
 0000071F  52		     1	        PUSH    EDX
 00000720  BA 000009A5 R     1	        MOV EDX, OFFSET ??001E
 00000725  E8 00000000 E     1	        CALL    WriteString
 0000072A  5A		     1	        POP EDX
				    mGotoxy 10, 23
 0000072B  52		     1	    PUSH    EDX
 0000072C  B6 17	     1	    MOV DH, 23
 0000072E  B2 0A	     1	    MOV DL, 10
 00000730  E8 00000000 E     1	    CALL    Gotoxy
 00000735  5A		     1	    POP EDX
				    mWrite  "|________________|                                                           |________________|"
 00000A05		     1	    .data
 00000A05 7C 5F 5F 5F 5F     1	        ??001F BYTE "|________________|                                                           |________________|", 0
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 7C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 7C 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 7C
	   00
 00000736		     1	    .code
 00000736  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000738  E8 00000000 E     1	        call SetTextColor
 0000073D  52		     1	        PUSH    EDX
 0000073E  BA 00000A05 R     1	        MOV EDX, OFFSET ??001F
 00000743  E8 00000000 E     1	        CALL    WriteString
 00000748  5A		     1	        POP EDX
				;基本資料-------------------------------
				    mGotoxy 48, 12                                      
 00000749  52		     1	    PUSH    EDX
 0000074A  B6 0C	     1	    MOV DH, 12
 0000074C  B2 30	     1	    MOV DL, 48
 0000074E  E8 00000000 E     1	    CALL    Gotoxy
 00000753  5A		     1	    POP EDX
				    mWrite  "Final Group Project"
 00000A65		     1	    .data
 00000A65 46 69 6E 61 6C     1	        ??0020 BYTE "Final Group Project", 0
	   20 47 72 6F 75
	   70 20 50 72 6F
	   6A 65 63 74 00
 00000754		     1	    .code
 00000754  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000756  E8 00000000 E     1	        call SetTextColor
 0000075B  52		     1	        PUSH    EDX
 0000075C  BA 00000A65 R     1	        MOV EDX, OFFSET ??0020
 00000761  E8 00000000 E     1	        CALL    WriteString
 00000766  5A		     1	        POP EDX
				    mGotoxy 55, 14                                      
 00000767  52		     1	    PUSH    EDX
 00000768  B6 0E	     1	    MOV DH, 14
 0000076A  B2 37	     1	    MOV DL, 55
 0000076C  E8 00000000 E     1	    CALL    Gotoxy
 00000771  5A		     1	    POP EDX
				    mWrite  "Group 5"
 00000A79		     1	    .data
 00000A79 47 72 6F 75 70     1	        ??0021 BYTE "Group 5", 0
	   20 35 00
 00000772		     1	    .code
 00000772  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000774  E8 00000000 E     1	        call SetTextColor
 00000779  52		     1	        PUSH    EDX
 0000077A  BA 00000A79 R     1	        MOV EDX, OFFSET ??0021
 0000077F  E8 00000000 E     1	        CALL    WriteString
 00000784  5A		     1	        POP EDX
				    mGotoxy 40, 16
 00000785  52		     1	    PUSH    EDX
 00000786  B6 10	     1	    MOV DH, 16
 00000788  B2 28	     1	    MOV DL, 40
 0000078A  E8 00000000 E     1	    CALL    Gotoxy
 0000078F  5A		     1	    POP EDX
				    mWrite  "資工二乙     408262143"
 00000A81		     1	    .data
 00000A81 B8 EA A4 75 A4     1	        ??0022 BYTE "資工二乙     408262143", 0
	   47 A4 41 20 20
	   20 20 20 34 30
	   38 32 36 32 31
	   34 33 00
 00000790		     1	    .code
 00000790  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000792  E8 00000000 E     1	        call SetTextColor
 00000797  52		     1	        PUSH    EDX
 00000798  BA 00000A81 R     1	        MOV EDX, OFFSET ??0022
 0000079D  E8 00000000 E     1	        CALL    WriteString
 000007A2  5A		     1	        POP EDX
				    mGotoxy 40, 18
 000007A3  52		     1	    PUSH    EDX
 000007A4  B6 12	     1	    MOV DH, 18
 000007A6  B2 28	     1	    MOV DL, 40
 000007A8  E8 00000000 E     1	    CALL    Gotoxy
 000007AD  5A		     1	    POP EDX
				    mWrite  "資工二乙     408262349"
 00000A98		     1	    .data
 00000A98 B8 EA A4 75 A4     1	        ??0023 BYTE "資工二乙     408262349", 0
	   47 A4 41 20 20
	   20 20 20 34 30
	   38 32 36 32 33
	   34 39 00
 000007AE		     1	    .code
 000007AE  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000007B0  E8 00000000 E     1	        call SetTextColor
 000007B5  52		     1	        PUSH    EDX
 000007B6  BA 00000A98 R     1	        MOV EDX, OFFSET ??0023
 000007BB  E8 00000000 E     1	        CALL    WriteString
 000007C0  5A		     1	        POP EDX
				    mGotoxy 40, 20
 000007C1  52		     1	    PUSH    EDX
 000007C2  B6 14	     1	    MOV DH, 20
 000007C4  B2 28	     1	    MOV DL, 40
 000007C6  E8 00000000 E     1	    CALL    Gotoxy
 000007CB  5A		     1	    POP EDX
				    mWrite  "資工二乙     408262416    Yan-Ting Chen"
 00000AAF		     1	    .data
 00000AAF B8 EA A4 75 A4     1	        ??0024 BYTE "資工二乙     408262416    Yan-Ting Chen", 0
	   47 A4 41 20 20
	   20 20 20 34 30
	   38 32 36 32 34
	   31 36 20 20 20
	   20 59 61 6E 2D
	   54 69 6E 67 20
	   43 68 65 6E 00
 000007CC		     1	    .code
 000007CC  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000007CE  E8 00000000 E     1	        call SetTextColor
 000007D3  52		     1	        PUSH    EDX
 000007D4  BA 00000AAF R     1	        MOV EDX, OFFSET ??0024
 000007D9  E8 00000000 E     1	        CALL    WriteString
 000007DE  5A		     1	        POP EDX
				    mGotoxy 44, 22
 000007DF  52		     1	    PUSH    EDX
 000007E0  B6 16	     1	    MOV DH, 22
 000007E2  B2 2C	     1	    MOV DL, 44
 000007E4  E8 00000000 E     1	    CALL    Gotoxy
 000007E9  5A		     1	    POP EDX
				;--------------------------------------
 000007EA  E8 00000000 E	    call    WaitMsg
				    mGotoxy 0, 0  
 000007EF  52		     1	    PUSH    EDX
 000007F0  B6 00	     1	    MOV DH, 0
 000007F2  B2 00	     1	    MOV DL, 0
 000007F4  E8 00000000 E     1	    CALL    Gotoxy
 000007F9  5A		     1	    POP EDX
				       
 000007FA  C3			    RET
 000007FB			DrawFirstScreen ENDP
				;----------------------------
				;規則------------------------
 000007FB			rule proc
 000007FB  E8 00000000 E	    call    ClrScr
 00000800  E8 FFFFFA2F		    call    PrintWalls
				    
				    mGotoxy 25, 3                                       
 00000805  52		     1	    PUSH    EDX
 00000806  B6 03	     1	    MOV DH, 3
 00000808  B2 19	     1	    MOV DL, 25
 0000080A  E8 00000000 E     1	    CALL    Gotoxy
 0000080F  5A		     1	    POP EDX
				    mWrite  " _____    _____   __    __ ______    _____                     _____    "  
 00000AD7		     1	    .data
 00000AD7 20 5F 5F 5F 5F     1	        ??0025 BYTE " _____    _____   __    __ ______    _____                     _____    ", 0
	   5F 20 20 20 20
	   5F 5F 5F 5F 5F
	   20 20 20 5F 5F
	   20 20 20 20 5F
	   5F 20 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 5F 5F 5F
	   5F 5F 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 5F 5F
	   5F 5F 5F 20 20
	   20 20 00
 00000810		     1	    .code
 00000810  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000812  E8 00000000 E     1	        call SetTextColor
 00000817  52		     1	        PUSH    EDX
 00000818  BA 00000AD7 R     1	        MOV EDX, OFFSET ??0025
 0000081D  E8 00000000 E     1	        CALL    WriteString
 00000822  5A		     1	        POP EDX
				    mGotoxy 25, 4 
 00000823  52		     1	    PUSH    EDX
 00000824  B6 04	     1	    MOV DH, 4
 00000826  B2 19	     1	    MOV DL, 25
 00000828  E8 00000000 E     1	    CALL    Gotoxy
 0000082D  5A		     1	    POP EDX
				    mWrite  "/        |     |  | \  / | |         |    |   |     |  |      |         "
 00000B20		     1	    .data
 00000B20 2F 20 20 20 20     1	        ??0026 BYTE "/        |     |  | \  / | |         |    |   |     |  |      |         ", 0
	   20 20 20 20 7C
	   20 20 20 20 20
	   7C 20 20 7C 20
	   5C 20 20 2F 20
	   7C 20 7C 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 7C 20 20
	   20 7C 20 20 20
	   20 20 7C 20 20
	   7C 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 00
 0000082E		     1	    .code
 0000082E  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000830  E8 00000000 E     1	        call SetTextColor
 00000835  52		     1	        PUSH    EDX
 00000836  BA 00000B20 R     1	        MOV EDX, OFFSET ??0026
 0000083B  E8 00000000 E     1	        CALL    WriteString
 00000840  5A		     1	        POP EDX
				    mGotoxy 25, 5
 00000841  52		     1	    PUSH    EDX
 00000842  B6 05	     1	    MOV DH, 5
 00000844  B2 19	     1	    MOV DL, 25
 00000846  E8 00000000 E     1	    CALL    Gotoxy
 0000084B  5A		     1	    POP EDX
				    mWrite  "|  ____  |_____|  |  \/  | |_____    |____|   |     |  |      |_____     "
 00000B69		     1	    .data
 00000B69 7C 20 20 5F 5F     1	        ??0027 BYTE "|  ____  |_____|  |  \/  | |_____    |____|   |     |  |      |_____     ", 0
	   5F 5F 20 20 7C
	   5F 5F 5F 5F 5F
	   7C 20 20 7C 20
	   20 5C 2F 20 20
	   7C 20 7C 5F 5F
	   5F 5F 5F 20 20
	   20 20 7C 5F 5F
	   5F 5F 7C 20 20
	   20 7C 20 20 20
	   20 20 7C 20 20
	   7C 20 20 20 20
	   20 20 7C 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 00
 0000084C		     1	    .code
 0000084C  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000084E  E8 00000000 E     1	        call SetTextColor
 00000853  52		     1	        PUSH    EDX
 00000854  BA 00000B69 R     1	        MOV EDX, OFFSET ??0027
 00000859  E8 00000000 E     1	        CALL    WriteString
 0000085E  5A		     1	        POP EDX
				    mGotoxy 25, 6
 0000085F  52		     1	    PUSH    EDX
 00000860  B6 06	     1	    MOV DH, 6
 00000862  B2 19	     1	    MOV DL, 25
 00000864  E8 00000000 E     1	    CALL    Gotoxy
 00000869  5A		     1	    POP EDX
				    mWrite  "|     |  |     |  |      | |         |   \    |     |  |      |          "
 00000BB3		     1	    .data
 00000BB3 7C 20 20 20 20     1	        ??0028 BYTE "|     |  |     |  |      | |         |   \    |     |  |      |          ", 0
	   20 7C 20 20 7C
	   20 20 20 20 20
	   7C 20 20 7C 20
	   20 20 20 20 20
	   7C 20 7C 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 5C 20 20 20
	   20 7C 20 20 20
	   20 20 7C 20 20
	   7C 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 20 20
	   20 20 20 00
 0000086A		     1	    .code
 0000086A  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000086C  E8 00000000 E     1	        call SetTextColor
 00000871  52		     1	        PUSH    EDX
 00000872  BA 00000BB3 R     1	        MOV EDX, OFFSET ??0028
 00000877  E8 00000000 E     1	        CALL    WriteString
 0000087C  5A		     1	        POP EDX
				    mGotoxy 25, 7
 0000087D  52		     1	    PUSH    EDX
 0000087E  B6 07	     1	    MOV DH, 7
 00000880  B2 19	     1	    MOV DL, 25
 00000882  E8 00000000 E     1	    CALL    Gotoxy
 00000887  5A		     1	    POP EDX
				    mWrite  "\_____/  |     |  |      | |_____    |    \   |_____|  |____  |_____    "
 00000BFD		     1	    .data
 00000BFD 5C 5F 5F 5F 5F     1	        ??0029 BYTE "\_____/  |     |  |      | |_____    |    \   |_____|  |____  |_____    ", 0
	   5F 2F 20 20 7C
	   20 20 20 20 20
	   7C 20 20 7C 20
	   20 20 20 20 20
	   7C 20 7C 5F 5F
	   5F 5F 5F 20 20
	   20 20 7C 20 20
	   20 20 5C 20 20
	   20 7C 5F 5F 5F
	   5F 5F 7C 20 20
	   7C 5F 5F 5F 5F
	   20 20 7C 5F 5F
	   5F 5F 5F 20 20
	   20 20 00
 00000888		     1	    .code
 00000888  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000088A  E8 00000000 E     1	        call SetTextColor
 0000088F  52		     1	        PUSH    EDX
 00000890  BA 00000BFD R     1	        MOV EDX, OFFSET ??0029
 00000895  E8 00000000 E     1	        CALL    WriteString
 0000089A  5A		     1	        POP EDX

				    mGotoxy 30, 10
 0000089B  52		     1	    PUSH    EDX
 0000089C  B6 0A	     1	    MOV DH, 10
 0000089E  B2 1E	     1	    MOV DL, 30
 000008A0  E8 00000000 E     1	    CALL    Gotoxy
 000008A5  5A		     1	    POP EDX
				    mWrite  " * First : Enter your name",                                 
			     1	    LOCAL string
main.asm(469) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  main.asm(469): Main Line Code
 00000C46		     1	    .data
 00000C46 20 2A 20 46 69     1	        ??002A BYTE " * First : Enter your name", 0
	   72 73 74 20 3A
	   20 45 6E 74 65
	   72 20 79 6F 75
	   72 20 6E 61 6D
	   65 00
 000008A6		     1	    .code
 000008A6  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000008A8  E8 00000000 E     1	        call SetTextColor
 000008AD  52		     1	        PUSH    EDX
 000008AE  BA 00000C46 R     1	        MOV EDX, OFFSET ??002A
 000008B3  E8 00000000 E     1	        CALL    WriteString
 000008B8  5A		     1	        POP EDX
				    mGotoxy 30, 12                                      
 000008B9  52		     1	    PUSH    EDX
 000008BA  B6 0C	     1	    MOV DH, 12
 000008BC  B2 1E	     1	    MOV DL, 30
 000008BE  E8 00000000 E     1	    CALL    Gotoxy
 000008C3  5A		     1	    POP EDX
				    mWrite  " * Second : choose the level that you want to challenge"
 00000C61		     1	    .data
 00000C61 20 2A 20 53 65     1	        ??002B BYTE " * Second : choose the level that you want to challenge", 0
	   63 6F 6E 64 20
	   3A 20 63 68 6F
	   6F 73 65 20 74
	   68 65 20 6C 65
	   76 65 6C 20 74
	   68 61 74 20 79
	   6F 75 20 77 61
	   6E 74 20 74 6F
	   20 63 68 61 6C
	   6C 65 6E 67 65
	   00
 000008C4		     1	    .code
 000008C4  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000008C6  E8 00000000 E     1	        call SetTextColor
 000008CB  52		     1	        PUSH    EDX
 000008CC  BA 00000C61 R     1	        MOV EDX, OFFSET ??002B
 000008D1  E8 00000000 E     1	        CALL    WriteString
 000008D6  5A		     1	        POP EDX
				    mGotoxy 30, 14                                      
 000008D7  52		     1	    PUSH    EDX
 000008D8  B6 0E	     1	    MOV DH, 14
 000008DA  B2 1E	     1	    MOV DL, 30
 000008DC  E8 00000000 E     1	    CALL    Gotoxy
 000008E1  5A		     1	    POP EDX
				    mWrite  " * Start the game"
 00000C99		     1	    .data
 00000C99 20 2A 20 53 74     1	        ??002C BYTE " * Start the game", 0
	   61 72 74 20 74
	   68 65 20 67 61
	   6D 65 00
 000008E2		     1	    .code
 000008E2  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000008E4  E8 00000000 E     1	        call SetTextColor
 000008E9  52		     1	        PUSH    EDX
 000008EA  BA 00000C99 R     1	        MOV EDX, OFFSET ??002C
 000008EF  E8 00000000 E     1	        CALL    WriteString
 000008F4  5A		     1	        POP EDX
				    mGotoxy 33, 16                                      
 000008F5  52		     1	    PUSH    EDX
 000008F6  B6 10	     1	    MOV DH, 16
 000008F8  B2 21	     1	    MOV DL, 33
 000008FA  E8 00000000 E     1	    CALL    Gotoxy
 000008FF  5A		     1	    POP EDX
				    mWrite  "Press up, right, down, and left to move your snake !!!"
 00000CAB		     1	    .data
 00000CAB 50 72 65 73 73     1	        ??002D BYTE "Press up, right, down, and left to move your snake !!!", 0
	   20 75 70 2C 20
	   72 69 67 68 74
	   2C 20 64 6F 77
	   6E 2C 20 61 6E
	   64 20 6C 65 66
	   74 20 74 6F 20
	   6D 6F 76 65 20
	   79 6F 75 72 20
	   73 6E 61 6B 65
	   20 21 21 21 00
 00000900		     1	    .code
 00000900  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000902  E8 00000000 E     1	        call SetTextColor
 00000907  52		     1	        PUSH    EDX
 00000908  BA 00000CAB R     1	        MOV EDX, OFFSET ??002D
 0000090D  E8 00000000 E     1	        CALL    WriteString
 00000912  5A		     1	        POP EDX
				    mGotoxy 33, 18
 00000913  52		     1	    PUSH    EDX
 00000914  B6 12	     1	    MOV DH, 18
 00000916  B2 21	     1	    MOV DL, 33
 00000918  E8 00000000 E     1	    CALL    Gotoxy
 0000091D  5A		     1	    POP EDX
				    mWrite  "There are 5 different kinds of foods that snake can eat."
 00000CE2		     1	    .data
 00000CE2 54 68 65 72 65     1	        ??002E BYTE "There are 5 different kinds of foods that snake can eat.", 0
	   20 61 72 65 20
	   35 20 64 69 66
	   66 65 72 65 6E
	   74 20 6B 69 6E
	   64 73 20 6F 66
	   20 66 6F 6F 64
	   73 20 74 68 61
	   74 20 73 6E 61
	   6B 65 20 63 61
	   6E 20 65 61 74
	   2E 00
 0000091E		     1	    .code
 0000091E  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000920  E8 00000000 E     1	        call SetTextColor
 00000925  52		     1	        PUSH    EDX
 00000926  BA 00000CE2 R     1	        MOV EDX, OFFSET ??002E
 0000092B  E8 00000000 E     1	        CALL    WriteString
 00000930  5A		     1	        POP EDX
				    mGotoxy 33, 20
 00000931  52		     1	    PUSH    EDX
 00000932  B6 14	     1	    MOV DH, 20
 00000934  B2 21	     1	    MOV DL, 33
 00000936  E8 00000000 E     1	    CALL    Gotoxy
 0000093B  5A		     1	    POP EDX
				    mWrite  "What the snake eat, what the snake become"
 00000D1B		     1	    .data
 00000D1B 57 68 61 74 20     1	        ??002F BYTE "What the snake eat, what the snake become", 0
	   74 68 65 20 73
	   6E 61 6B 65 20
	   65 61 74 2C 20
	   77 68 61 74 20
	   74 68 65 20 73
	   6E 61 6B 65 20
	   62 65 63 6F 6D
	   65 00
 0000093C		     1	    .code
 0000093C  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000093E  E8 00000000 E     1	        call SetTextColor
 00000943  52		     1	        PUSH    EDX
 00000944  BA 00000D1B R     1	        MOV EDX, OFFSET ??002F
 00000949  E8 00000000 E     1	        CALL    WriteString
 0000094E  5A		     1	        POP EDX
				    mGotoxy 33, 22
 0000094F  52		     1	    PUSH    EDX
 00000950  B6 16	     1	    MOV DH, 22
 00000952  B2 21	     1	    MOV DL, 33
 00000954  E8 00000000 E     1	    CALL    Gotoxy
 00000959  5A		     1	    POP EDX
				    mWrite  "You will die if you bump to the wall !!!"
 00000D45		     1	    .data
 00000D45 59 6F 75 20 77     1	        ??0030 BYTE "You will die if you bump to the wall !!!", 0
	   69 6C 6C 20 64
	   69 65 20 69 66
	   20 79 6F 75 20
	   62 75 6D 70 20
	   74 6F 20 74 68
	   65 20 77 61 6C
	   6C 20 21 21 21
	   00
 0000095A		     1	    .code
 0000095A  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000095C  E8 00000000 E     1	        call SetTextColor
 00000961  52		     1	        PUSH    EDX
 00000962  BA 00000D45 R     1	        MOV EDX, OFFSET ??0030
 00000967  E8 00000000 E     1	        CALL    WriteString
 0000096C  5A		     1	        POP EDX
				    mGotoxy 33, 24
 0000096D  52		     1	    PUSH    EDX
 0000096E  B6 18	     1	    MOV DH, 24
 00000970  B2 21	     1	    MOV DL, 33
 00000972  E8 00000000 E     1	    CALL    Gotoxy
 00000977  5A		     1	    POP EDX
				    mWrite  "Good Luck & Take care"
 00000D6E		     1	    .data
 00000D6E 47 6F 6F 64 20     1	        ??0031 BYTE "Good Luck & Take care", 0
	   4C 75 63 6B 20
	   26 20 54 61 6B
	   65 20 63 61 72
	   65 00
 00000978		     1	    .code
 00000978  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 0000097A  E8 00000000 E     1	        call SetTextColor
 0000097F  52		     1	        PUSH    EDX
 00000980  BA 00000D6E R     1	        MOV EDX, OFFSET ??0031
 00000985  E8 00000000 E     1	        CALL    WriteString
 0000098A  5A		     1	        POP EDX
				    mGotoxy 44, 26
 0000098B  52		     1	    PUSH    EDX
 0000098C  B6 1A	     1	    MOV DH, 26
 0000098E  B2 2C	     1	    MOV DL, 44
 00000990  E8 00000000 E     1	    CALL    Gotoxy
 00000995  5A		     1	    POP EDX

 00000996  E8 00000000 E	    CALL    WaitMsg
				    mGotoxy 0, 0  
 0000099B  52		     1	    PUSH    EDX
 0000099C  B6 00	     1	    MOV DH, 0
 0000099E  B2 00	     1	    MOV DL, 0
 000009A0  E8 00000000 E     1	    CALL    Gotoxy
 000009A5  5A		     1	    POP EDX
 000009A6  E8 00000000 E	    call Clrscr
				       
 000009AB  C3			    ret
 000009AC			rule endp
				;---------------------------
				;輸入玩家名------------------
 000009AC			entername proc
 000009AC  E8 00000000 E	    call    ClrScr
 000009B1  E8 FFFFF87E		    call    PrintWalls
				    mGotoxy 45, 7                                       
 000009B6  52		     1	    PUSH    EDX
 000009B7  B6 07	     1	    MOV DH, 7
 000009B9  B2 2D	     1	    MOV DL, 45
 000009BB  E8 00000000 E     1	    CALL    Gotoxy
 000009C0  5A		     1	    POP EDX
				    mWrite  "----enter your name----"
 00000D84		     1	    .data
 00000D84 2D 2D 2D 2D 65     1	        ??0032 BYTE "----enter your name----", 0
	   6E 74 65 72 20
	   79 6F 75 72 20
	   6E 61 6D 65 2D
	   2D 2D 2D 00
 000009C1		     1	    .code
 000009C1  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000009C3  E8 00000000 E     1	        call SetTextColor
 000009C8  52		     1	        PUSH    EDX
 000009C9  BA 00000D84 R     1	        MOV EDX, OFFSET ??0032
 000009CE  E8 00000000 E     1	        CALL    WriteString
 000009D3  5A		     1	        POP EDX
				    mGotoxy 45, 9
 000009D4  52		     1	    PUSH    EDX
 000009D5  B6 09	     1	    MOV DH, 9
 000009D7  B2 2D	     1	    MOV DL, 45
 000009D9  E8 00000000 E     1	    CALL    Gotoxy
 000009DE  5A		     1	    POP EDX
				    mWrite  "Your Name: "
 00000D9C		     1	    .data
 00000D9C 59 6F 75 72 20     1	        ??0033 BYTE "Your Name: ", 0
	   4E 61 6D 65 3A
	   20 00
 000009DF		     1	    .code
 000009DF  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 000009E1  E8 00000000 E     1	        call SetTextColor
 000009E6  52		     1	        PUSH    EDX
 000009E7  BA 00000D9C R     1	        MOV EDX, OFFSET ??0033
 000009EC  E8 00000000 E     1	        CALL    WriteString
 000009F1  5A		     1	        POP EDX
				    mReadString playerName
 000009F2  51		     1	    PUSH    ECX
 000009F3  52		     1	    PUSH    EDX
 000009F4  BA 0000020A R     1	    MOV EDX, OFFSET playerName
 000009F9  B9 0000000E	     1	    MOV ECX, SIZEOF playerName
 000009FE  E8 00000000 E     1	    CALL    ReadString
 00000A03  5A		     1	    POP EDX
 00000A04  59		     1	    POP ECX
				    mGotoxy 0, 0 
 00000A05  52		     1	    PUSH    EDX
 00000A06  B6 00	     1	    MOV DH, 0
 00000A08  B2 00	     1	    MOV DL, 0
 00000A0A  E8 00000000 E     1	    CALL    Gotoxy
 00000A0F  5A		     1	    POP EDX
 00000A10  E8 00000000 E	    call    ClrScr
 00000A15  C3			    ret
 00000A16			entername endp
				;---------------------------
				;難易------------------------
 00000A16			ChooseLev proc
 00000A16  E8 FFFFF819		    call    PrintWalls

				    mGotoxy 52, 7
 00000A1B  52		     1	    PUSH    EDX
 00000A1C  B6 07	     1	    MOV DH, 7
 00000A1E  B2 34	     1	    MOV DL, 52
 00000A20  E8 00000000 E     1	    CALL    Gotoxy
 00000A25  5A		     1	    POP EDX
				    mWrite "Hello, "
 00000DA8		     1	    .data
 00000DA8 48 65 6C 6C 6F     1	        ??0034 BYTE "Hello, ", 0
	   2C 20 00
 00000A26		     1	    .code
 00000A26  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000A28  E8 00000000 E     1	        call SetTextColor
 00000A2D  52		     1	        PUSH    EDX
 00000A2E  BA 00000DA8 R     1	        MOV EDX, OFFSET ??0034
 00000A33  E8 00000000 E     1	        CALL    WriteString
 00000A38  5A		     1	        POP EDX
				    mWriteString OFFSET playerName 
 00000A39  B0 0F	     1	    mov al , white + ( black * 16 )
 00000A3B  E8 00000000 E     1	    call SetTextColor
 00000A40  52		     1	    PUSH    EDX
 00000A41  BA 0000020A R     1	    MOV EDX, OFFSET OFFSET playerName
 00000A46  E8 00000000 E     1	    CALL    WriteString
 00000A4B  5A		     1	    POP EDX
				    mGotoxy 40, 9
 00000A4C  52		     1	    PUSH    EDX
 00000A4D  B6 09	     1	    MOV DH, 9
 00000A4F  B2 28	     1	    MOV DL, 40
 00000A51  E8 00000000 E     1	    CALL    Gotoxy
 00000A56  5A		     1	    POP EDX
				    mWrite "Choose a level which you want challenge !!!"
 00000DB0		     1	    .data
 00000DB0 43 68 6F 6F 73     1	        ??0035 BYTE "Choose a level which you want challenge !!!", 0
	   65 20 61 20 6C
	   65 76 65 6C 20
	   77 68 69 63 68
	   20 79 6F 75 20
	   77 61 6E 74 20
	   63 68 61 6C 6C
	   65 6E 67 65 20
	   21 21 21 00
 00000A57		     1	    .code
 00000A57  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000A59  E8 00000000 E     1	        call SetTextColor
 00000A5E  52		     1	        PUSH    EDX
 00000A5F  BA 00000DB0 R     1	        MOV EDX, OFFSET ??0035
 00000A64  E8 00000000 E     1	        CALL    WriteString
 00000A69  5A		     1	        POP EDX
				;難度(速度)選擇----------------------
 00000A6A			 L1:
				    mGotoxy 48, 11
 00000A6A  52		     1	    PUSH    EDX
 00000A6B  B6 0B	     1	    MOV DH, 11
 00000A6D  B2 30	     1	    MOV DL, 48
 00000A6F  E8 00000000 E     1	    CALL    Gotoxy
 00000A74  5A		     1	    POP EDX
				    mWrite  "----LEVEL Table----" 
 00000DDC		     1	    .data
 00000DDC 2D 2D 2D 2D 4C     1	        ??0036 BYTE "----LEVEL Table----", 0
	   45 56 45 4C 20
	   54 61 62 6C 65
	   2D 2D 2D 2D 00
 00000A75		     1	    .code
 00000A75  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000A77  E8 00000000 E     1	        call SetTextColor
 00000A7C  52		     1	        PUSH    EDX
 00000A7D  BA 00000DDC R     1	        MOV EDX, OFFSET ??0036
 00000A82  E8 00000000 E     1	        CALL    WriteString
 00000A87  5A		     1	        POP EDX
				    mGotoxy 48, 13 
 00000A88  52		     1	    PUSH    EDX
 00000A89  B6 0D	     1	    MOV DH, 13
 00000A8B  B2 30	     1	    MOV DL, 48
 00000A8D  E8 00000000 E     1	    CALL    Gotoxy
 00000A92  5A		     1	    POP EDX
				    mWrite  "(0) Level_0 : Easy"    
 00000DF0		     1	    .data
 00000DF0 28 30 29 20 4C     1	        ??0037 BYTE "(0) Level_0 : Easy", 0
	   65 76 65 6C 5F
	   30 20 3A 20 45
	   61 73 79 00
 00000A93		     1	    .code
 00000A93  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000A95  E8 00000000 E     1	        call SetTextColor
 00000A9A  52		     1	        PUSH    EDX
 00000A9B  BA 00000DF0 R     1	        MOV EDX, OFFSET ??0037
 00000AA0  E8 00000000 E     1	        CALL    WriteString
 00000AA5  5A		     1	        POP EDX
				    mGotoxy 48, 15 
 00000AA6  52		     1	    PUSH    EDX
 00000AA7  B6 0F	     1	    MOV DH, 15
 00000AA9  B2 30	     1	    MOV DL, 48
 00000AAB  E8 00000000 E     1	    CALL    Gotoxy
 00000AB0  5A		     1	    POP EDX
				    mWrite  "(1) Level_1 : Normal"
 00000E03		     1	    .data
 00000E03 28 31 29 20 4C     1	        ??0038 BYTE "(1) Level_1 : Normal", 0
	   65 76 65 6C 5F
	   31 20 3A 20 4E
	   6F 72 6D 61 6C
	   00
 00000AB1		     1	    .code
 00000AB1  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000AB3  E8 00000000 E     1	        call SetTextColor
 00000AB8  52		     1	        PUSH    EDX
 00000AB9  BA 00000E03 R     1	        MOV EDX, OFFSET ??0038
 00000ABE  E8 00000000 E     1	        CALL    WriteString
 00000AC3  5A		     1	        POP EDX
				    mGotoxy 48, 17 
 00000AC4  52		     1	    PUSH    EDX
 00000AC5  B6 11	     1	    MOV DH, 17
 00000AC7  B2 30	     1	    MOV DL, 48
 00000AC9  E8 00000000 E     1	    CALL    Gotoxy
 00000ACE  5A		     1	    POP EDX
				    mWrite  "(2) Level_2 : Medium"
 00000E18		     1	    .data
 00000E18 28 32 29 20 4C     1	        ??0039 BYTE "(2) Level_2 : Medium", 0
	   65 76 65 6C 5F
	   32 20 3A 20 4D
	   65 64 69 75 6D
	   00
 00000ACF		     1	    .code
 00000ACF  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000AD1  E8 00000000 E     1	        call SetTextColor
 00000AD6  52		     1	        PUSH    EDX
 00000AD7  BA 00000E18 R     1	        MOV EDX, OFFSET ??0039
 00000ADC  E8 00000000 E     1	        CALL    WriteString
 00000AE1  5A		     1	        POP EDX
				    mGotoxy 48, 19
 00000AE2  52		     1	    PUSH    EDX
 00000AE3  B6 13	     1	    MOV DH, 19
 00000AE5  B2 30	     1	    MOV DL, 48
 00000AE7  E8 00000000 E     1	    CALL    Gotoxy
 00000AEC  5A		     1	    POP EDX
				    mWrite  "(3) Level_3 : Hard"
 00000E2D		     1	    .data
 00000E2D 28 33 29 20 4C     1	        ??003A BYTE "(3) Level_3 : Hard", 0
	   65 76 65 6C 5F
	   33 20 3A 20 48
	   61 72 64 00
 00000AED		     1	    .code
 00000AED  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000AEF  E8 00000000 E     1	        call SetTextColor
 00000AF4  52		     1	        PUSH    EDX
 00000AF5  BA 00000E2D R     1	        MOV EDX, OFFSET ??003A
 00000AFA  E8 00000000 E     1	        CALL    WriteString
 00000AFF  5A		     1	        POP EDX
				    mGotoxy 48, 21
 00000B00  52		     1	    PUSH    EDX
 00000B01  B6 15	     1	    MOV DH, 21
 00000B03  B2 30	     1	    MOV DL, 48
 00000B05  E8 00000000 E     1	    CALL    Gotoxy
 00000B0A  5A		     1	    POP EDX
				    mWrite  "Your selection is  "
 00000E40		     1	    .data
 00000E40 59 6F 75 72 20     1	        ??003B BYTE "Your selection is  ", 0
	   73 65 6C 65 63
	   74 69 6F 6E 20
	   69 73 20 20 00
 00000B0B		     1	    .code
 00000B0B  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000B0D  E8 00000000 E     1	        call SetTextColor
 00000B12  52		     1	        PUSH    EDX
 00000B13  BA 00000E40 R     1	        MOV EDX, OFFSET ??003B
 00000B18  E8 00000000 E     1	        CALL    WriteString
 00000B1D  5A		     1	        POP EDX

 00000B1E  E8 00000000 E	    call    ReadChar    ;讀取選擇
 00000B23  A2 00000209 R	    mov choice, AL                                      
 00000B28  E8 00000000 E	    call    WriteChar

				    ;判斷選擇
				    .if choice == '0'
 00000B36  C7 05 00000204 R	        mov speed, 150
	   00000096
				    .elseif choice == '1'
 00000B4B  C7 05 00000204 R	        mov speed, 100
	   00000064
				    .elseif choice == '2'
 00000B60  C7 05 00000204 R	        mov speed, 75
	   0000004B
				    .elseif choice == '3'
 00000B75  C7 05 00000204 R	        mov speed, 50
	   00000032
				    .else
				        INVOKE  Sleep, 100
				        mGotoxy 0, 0                                    
 00000B88  52		     1	    PUSH    EDX
 00000B89  B6 00	     1	    MOV DH, 0
 00000B8B  B2 00	     1	    MOV DL, 0
 00000B8D  E8 00000000 E     1	    CALL    Gotoxy
 00000B92  5A		     1	    POP EDX
 00000B93  E8 00000000 E	        call    ClrScr
				        mGotoxy 40, 9
 00000B98  52		     1	    PUSH    EDX
 00000B99  B6 09	     1	    MOV DH, 9
 00000B9B  B2 28	     1	    MOV DL, 40
 00000B9D  E8 00000000 E     1	    CALL    Gotoxy
 00000BA2  5A		     1	    POP EDX
				        mWriteString offset wrong
 00000BA3  B0 0F	     1	    mov al , white + ( black * 16 )
 00000BA5  E8 00000000 E     1	    call SetTextColor
 00000BAA  52		     1	    PUSH    EDX
 00000BAB  BA 0000022A R     1	    MOV EDX, OFFSET offset wrong
 00000BB0  E8 00000000 E     1	    CALL    WriteString
 00000BB5  5A		     1	    POP EDX
 00000BB6  E8 FFFFF679		        call    PrintWalls
 00000BBB  E9 FFFFFEAA		        jmp L1
				    .endif
				    INVOKE  Sleep, 100
				    mGotoxy 0, 0                                    
 00000BC7  52		     1	    PUSH    EDX
 00000BC8  B6 00	     1	    MOV DH, 0
 00000BCA  B2 00	     1	    MOV DL, 0
 00000BCC  E8 00000000 E     1	    CALL    Gotoxy
 00000BD1  5A		     1	    POP EDX
 00000BD2  E8 00000000 E	    call    ClrScr      ;跳出主選單

 00000BD7  C3			    ret
 00000BD8			ChooseLev endp
				;---------------------------
				;遊戲結束--------------------
 00000BD8			gameover proc
 00000BD8  E8 00000000 E	    call    Clrscr
 00000BDD  E8 FFFFF652		    CALL    PrintWalls
				    mGotoxy 25, 4                                       
 00000BE2  52		     1	    PUSH    EDX
 00000BE3  B6 04	     1	    MOV DH, 4
 00000BE5  B2 19	     1	    MOV DL, 25
 00000BE7  E8 00000000 E     1	    CALL    Gotoxy
 00000BEC  5A		     1	    POP EDX
				    mWrite  " _____    _____   __    __ ______     _____             ______   ____ "  
 00000E54		     1	    .data
 00000E54 20 5F 5F 5F 5F     1	        ??003C BYTE " _____    _____   __    __ ______     _____             ______   ____ ", 0
	   5F 20 20 20 20
	   5F 5F 5F 5F 5F
	   20 20 20 5F 5F
	   20 20 20 20 5F
	   5F 20 5F 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 5F 5F
	   5F 5F 5F 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 5F 5F 5F 5F
	   5F 5F 20 20 20
	   5F 5F 5F 5F 20
	   00
 00000BED		     1	    .code
 00000BED  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000BEF  E8 00000000 E     1	        call SetTextColor
 00000BF4  52		     1	        PUSH    EDX
 00000BF5  BA 00000E54 R     1	        MOV EDX, OFFSET ??003C
 00000BFA  E8 00000000 E     1	        CALL    WriteString
 00000BFF  5A		     1	        POP EDX
				    mGotoxy 25, 5 
 00000C00  52		     1	    PUSH    EDX
 00000C01  B6 05	     1	    MOV DH, 5
 00000C03  B2 19	     1	    MOV DL, 25
 00000C05  E8 00000000 E     1	    CALL    Gotoxy
 00000C0A  5A		     1	    POP EDX
				    mWrite  "/        |     |  | \  / | |         /     \  |      |  |       |    |"
 00000E9B		     1	    .data
 00000E9B 2F 20 20 20 20     1	        ??003D BYTE "/        |     |  | \  / | |         /     \  |      |  |       |    |", 0
	   20 20 20 20 7C
	   20 20 20 20 20
	   7C 20 20 7C 20
	   5C 20 20 2F 20
	   7C 20 7C 20 20
	   20 20 20 20 20
	   20 20 2F 20 20
	   20 20 20 5C 20
	   20 7C 20 20 20
	   20 20 20 7C 20
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 20 7C
	   00
 00000C0B		     1	    .code
 00000C0B  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000C0D  E8 00000000 E     1	        call SetTextColor
 00000C12  52		     1	        PUSH    EDX
 00000C13  BA 00000E9B R     1	        MOV EDX, OFFSET ??003D
 00000C18  E8 00000000 E     1	        CALL    WriteString
 00000C1D  5A		     1	        POP EDX
				    mGotoxy 25, 6
 00000C1E  52		     1	    PUSH    EDX
 00000C1F  B6 06	     1	    MOV DH, 6
 00000C21  B2 19	     1	    MOV DL, 25
 00000C23  E8 00000000 E     1	    CALL    Gotoxy
 00000C28  5A		     1	    POP EDX
				    mWrite  "|  ____  |_____|  |  \/  | |_____    |     |  |      |  |_____  |____|"
 00000EE2		     1	    .data
 00000EE2 7C 20 20 5F 5F     1	        ??003E BYTE "|  ____  |_____|  |  \/  | |_____    |     |  |      |  |_____  |____|", 0
	   5F 5F 20 20 7C
	   5F 5F 5F 5F 5F
	   7C 20 20 7C 20
	   20 5C 2F 20 20
	   7C 20 7C 5F 5F
	   5F 5F 5F 20 20
	   20 20 7C 20 20
	   20 20 20 7C 20
	   20 7C 20 20 20
	   20 20 20 7C 20
	   20 7C 5F 5F 5F
	   5F 5F 20 20 7C
	   5F 5F 5F 5F 7C
	   00
 00000C29		     1	    .code
 00000C29  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000C2B  E8 00000000 E     1	        call SetTextColor
 00000C30  52		     1	        PUSH    EDX
 00000C31  BA 00000EE2 R     1	        MOV EDX, OFFSET ??003E
 00000C36  E8 00000000 E     1	        CALL    WriteString
 00000C3B  5A		     1	        POP EDX
				    mGotoxy 25, 7
 00000C3C  52		     1	    PUSH    EDX
 00000C3D  B6 07	     1	    MOV DH, 7
 00000C3F  B2 19	     1	    MOV DL, 25
 00000C41  E8 00000000 E     1	    CALL    Gotoxy
 00000C46  5A		     1	    POP EDX
				    mWrite  "|     |  |     |  |      | |         |     |  \      /  |       |   \"
 00000F29		     1	    .data
 00000F29 7C 20 20 20 20     1	        ??003F BYTE "|     |  |     |  |      | |         |     |  \      /  |       |   \", 0
	   20 7C 20 20 7C
	   20 20 20 20 20
	   7C 20 20 7C 20
	   20 20 20 20 20
	   7C 20 7C 20 20
	   20 20 20 20 20
	   20 20 7C 20 20
	   20 20 20 7C 20
	   20 5C 20 20 20
	   20 20 20 2F 20
	   20 7C 20 20 20
	   20 20 20 20 7C
	   20 20 20 5C 00
 00000C47		     1	    .code
 00000C47  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000C49  E8 00000000 E     1	        call SetTextColor
 00000C4E  52		     1	        PUSH    EDX
 00000C4F  BA 00000F29 R     1	        MOV EDX, OFFSET ??003F
 00000C54  E8 00000000 E     1	        CALL    WriteString
 00000C59  5A		     1	        POP EDX
				    mGotoxy 25, 8
 00000C5A  52		     1	    PUSH    EDX
 00000C5B  B6 08	     1	    MOV DH, 8
 00000C5D  B2 19	     1	    MOV DL, 25
 00000C5F  E8 00000000 E     1	    CALL    Gotoxy
 00000C64  5A		     1	    POP EDX
				    mWrite  "\_____/  |     |  |      | |_____    \_____/   \____/   |_____  |    \"
 00000F6F		     1	    .data
 00000F6F 5C 5F 5F 5F 5F     1	        ??0040 BYTE "\_____/  |     |  |      | |_____    \_____/   \____/   |_____  |    \", 0
	   5F 2F 20 20 7C
	   20 20 20 20 20
	   7C 20 20 7C 20
	   20 20 20 20 20
	   7C 20 7C 5F 5F
	   5F 5F 5F 20 20
	   20 20 5C 5F 5F
	   5F 5F 5F 2F 20
	   20 20 5C 5F 5F
	   5F 5F 2F 20 20
	   20 7C 5F 5F 5F
	   5F 5F 20 20 7C
	   20 20 20 20 5C
	   00
 00000C65		     1	    .code
 00000C65  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000C67  E8 00000000 E     1	        call SetTextColor
 00000C6C  52		     1	        PUSH    EDX
 00000C6D  BA 00000F6F R     1	        MOV EDX, OFFSET ??0040
 00000C72  E8 00000000 E     1	        CALL    WriteString
 00000C77  5A		     1	        POP EDX
				    mGotoxy 48, 12                                   
 00000C78  52		     1	    PUSH    EDX
 00000C79  B6 0C	     1	    MOV DH, 12
 00000C7B  B2 30	     1	    MOV DL, 48
 00000C7D  E8 00000000 E     1	    CALL    Gotoxy
 00000C82  5A		     1	    POP EDX
				    mWrite  "Your score is "
 00000FB6		     1	    .data
 00000FB6 59 6F 75 72 20     1	        ??0041 BYTE "Your score is ", 0
	   73 63 6F 72 65
	   20 69 73 20 00
 00000C83		     1	    .code
 00000C83  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000C85  E8 00000000 E     1	        call SetTextColor
 00000C8A  52		     1	        PUSH    EDX
 00000C8B  BA 00000FB6 R     1	        MOV EDX, OFFSET ??0041
 00000C90  E8 00000000 E     1	        CALL    WriteString
 00000C95  5A		     1	        POP EDX
 00000C96  A1 00000000 R	    mov eax, score
 00000C9B  E8 00000000 E	    call writedec
				    mGotoxy 48, 14
 00000CA0  52		     1	    PUSH    EDX
 00000CA1  B6 0E	     1	    MOV DH, 14
 00000CA3  B2 30	     1	    MOV DL, 48
 00000CA5  E8 00000000 E     1	    CALL    Gotoxy
 00000CAA  5A		     1	    POP EDX
				    .if eax <= 10 && eax >= 0        
				        mWriteString offset again
 00000CB5  B0 0F	     1	    mov al , white + ( black * 16 )
 00000CB7  E8 00000000 E     1	    call SetTextColor
 00000CBC  52		     1	    PUSH    EDX
 00000CBD  BA 00000253 R     1	    MOV EDX, OFFSET offset again
 00000CC2  E8 00000000 E     1	    CALL    WriteString
 00000CC7  5A		     1	    POP EDX
				    .elseif eax <= 20 && eax > 10 
				         mWriteString offset good
 00000CD4  B0 0F	     1	    mov al , white + ( black * 16 )
 00000CD6  E8 00000000 E     1	    call SetTextColor
 00000CDB  52		     1	    PUSH    EDX
 00000CDC  BA 0000026D R     1	    MOV EDX, OFFSET offset good
 00000CE1  E8 00000000 E     1	    CALL    WriteString
 00000CE6  5A		     1	    POP EDX
				    .elseif eax > 20    
				        mWriteString offset excellent
 00000CEE  B0 0F	     1	    mov al , white + ( black * 16 )
 00000CF0  E8 00000000 E     1	    call SetTextColor
 00000CF5  52		     1	    PUSH    EDX
 00000CF6  BA 00000294 R     1	    MOV EDX, OFFSET offset excellent
 00000CFB  E8 00000000 E     1	    CALL    WriteString
 00000D00  5A		     1	    POP EDX
				    .endif
				    mGotoxy 48, 16                                   
 00000D01  52		     1	    PUSH    EDX
 00000D02  B6 10	     1	    MOV DH, 16
 00000D04  B2 30	     1	    MOV DL, 48
 00000D06  E8 00000000 E     1	    CALL    Gotoxy
 00000D0B  5A		     1	    POP EDX
				    mWrite  "Thanks for playing!!!"
 00000FC5		     1	    .data
 00000FC5 54 68 61 6E 6B     1	        ??0042 BYTE "Thanks for playing!!!", 0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 21
	   21 00
 00000D0C		     1	    .code
 00000D0C  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000D0E  E8 00000000 E     1	        call SetTextColor
 00000D13  52		     1	        PUSH    EDX
 00000D14  BA 00000FC5 R     1	        MOV EDX, OFFSET ??0042
 00000D19  E8 00000000 E     1	        CALL    WriteString
 00000D1E  5A		     1	        POP EDX
				    mGotoxy 48, 18                                   
 00000D1F  52		     1	    PUSH    EDX
 00000D20  B6 12	     1	    MOV DH, 18
 00000D22  B2 30	     1	    MOV DL, 48
 00000D24  E8 00000000 E     1	    CALL    Gotoxy
 00000D29  5A		     1	    POP EDX
				    mWrite  "FJCU CSIE Group 5"
 00000FDB		     1	    .data
 00000FDB 46 4A 43 55 20     1	        ??0043 BYTE "FJCU CSIE Group 5", 0
	   43 53 49 45 20
	   47 72 6F 75 70
	   20 35 00
 00000D2A		     1	    .code
 00000D2A  B0 0F	     1	        mov al , white + ( black * 16 );改變顏色
 00000D2C  E8 00000000 E     1	        call SetTextColor
 00000D31  52		     1	        PUSH    EDX
 00000D32  BA 00000FDB R     1	        MOV EDX, OFFSET ??0043
 00000D37  E8 00000000 E     1	        CALL    WriteString
 00000D3C  5A		     1	        POP EDX

				    INVOKE  Sleep, 100
				                                                            
				    mGotoxy 25,28
 00000D44  52		     1	    PUSH    EDX
 00000D45  B6 1C	     1	    MOV DH, 28
 00000D47  B2 19	     1	    MOV DL, 25
 00000D49  E8 00000000 E     1	    CALL    Gotoxy
 00000D4E  5A		     1	    POP EDX
				        
 00000D4F  C3			    ret  
 00000D50			gameover endp
				;----------------------------
				;食物------------------------
 00000D50			createfood proc
 00000D50  E8 00000000 E	    call Randomize
				;食物的x座標---------------------------
 00000D55  E8 00000000 E	    call random32       
 00000D5A  33 D2		    xor edx, edx
 00000D5C  B9 00000071		    mov ecx, maxX - 2
 00000D61  F7 F1		    div ecx
 00000D63  80 C2 02		    add dl, 2
 00000D66  88 15 00000004 R	    mov foodPoint.x, dl
				;-------------------------------------
				;食物的y座標---------------------------
 00000D6C  E8 00000000 E	    call random32       
 00000D71  BA 00000000		    mov edx, 0
 00000D76  B9 0000001A		    mov ecx, maxY - 2
 00000D7B  F7 F1		    div ecx
 00000D7D  80 C2 02		    add dl, 2
 00000D80  88 15 00000005 R	    mov foodPoint.y, dl
				;-------------------------------------
				;將指標移至新的隨機座標-----------------
				    mGotoxy foodPoint.x, foodPoint.y
 00000D86  52		     1	    PUSH    EDX
 00000D87  8A 35 00000005 R  1	    MOV DH, foodPoint.y
 00000D8D  8A 15 00000004 R  1	    MOV DL, foodPoint.x
 00000D93  E8 00000000 E     1	    CALL    Gotoxy
 00000D98  5A		     1	    POP EDX
				;-------------------------------------
				;5 kinds of foods & random & show-----
 00000D99  B8 00000005		    mov eax, 5 
 00000D9E  E8 00000000 E	    call randomrange 
 00000DA3  A3 00000220 R	    mov foodrandomnum, eax
				    .if eax == 0
 00000DAC  B8 00000010		        mov eax, black (blue * 16)
 00000DB1  E8 00000000 E	        call settextcolor
 00000DB6  A0 0000021A R	        mov al, foodChar0
 00000DBB  E8 00000000 E	        call writechar
 00000DC0  C3			        ret
				    .elseif eax == 1
 00000DC8  B8 00000040		        mov eax, black (red * 16)
 00000DCD  E8 00000000 E	        call settextcolor
 00000DD2  A0 0000021B R	        mov al, foodChar1
 00000DD7  E8 00000000 E	        call writechar
 00000DDC  C3			        ret
				    .elseif eax == 2
 00000DE4  B8 000000E0		        mov eax, black (yellow * 16)
 00000DE9  E8 00000000 E	        call settextcolor
 00000DEE  A0 0000021C R	        mov al, foodChar2
 00000DF3  E8 00000000 E	        call writechar
 00000DF8  C3			        ret
				    .elseif eax == 3
 00000E00  B8 00000020		         mov eax, black (green * 16)
 00000E05  E8 00000000 E	        call settextcolor
 00000E0A  A0 0000021D R	        mov al, foodChar3
 00000E0F  E8 00000000 E	        call writechar
 00000E14  C3			        ret
				    .elseif eax == 4
 00000E1C  B8 000000F0		        mov eax, black (white * 16)
 00000E21  E8 00000000 E	        call settextcolor
 00000E26  A0 0000021E R	        mov al, foodChar4
 00000E2B  E8 00000000 E	        call writechar
 00000E30  C3			        ret
				    .endif
				;-------------------------------------
				    

 00000E31			createfood endp
				;---------------------------
 00000E31			startgame proc
 00000E31  E8 FFFFF6B1		    call    DrawFirstScreen  ;主頁
 00000E36			L0: 
 00000E36  E8 FFFFF9C0		    call    rule             ;規則
 00000E3B  E8 FFFFFB6C		    call    entername        ;輸入使用者名稱
 00000E40  E8 FFFFFBD1		    call    ChooseLev        ;選擇難易度
 00000E45			L1: 
 00000E45  E8 00000000 E	    call    ClrScr
 00000E4A  E8 FFFFFF01		    call    createfood       ;食物
 00000E4F  E8 FFFFF3E0		    call    PrintWalls       ;邊界
 00000E54			L2:
 00000E54  E8 FFFFF307		    call    grow             ;是否有吃到食物 如果有就加長 如果沒有就繼續
 00000E59  E8 FFFFF1D9		    call    presskey         ;是否按下按鈕
 00000E5E			L3: 
 00000E5E  E8 FFFFF455		    call    IsCollision      ;遊戲是否結束
				    .if eax != 1
 00000E68  E8 FFFFF48D		        call movesnake
 00000E6D  E8 FFFFF590		        call drawHUD
 00000E72  EB E0		        jmp L2
				    .else
				        INVOKE  Sleep, 100
 00000E7D  E8 FFFFFD56		        call    gameover
				    .endif
				    ;INVOKE  ExitProcess, 0
 00000E82  C3			    ret
 00000E83			startgame endp
				END main
Microsoft (R) Macro Assembler Version 14.27.29111.0	    12/29/20 12:56:02
main.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

AXIS . . . . . . . . . . . . . .	 00000002
  x  . . . . . . . . . . . . . .	 00000000	 Byte
  y  . . . . . . . . . . . . . .	 00000001	 Byte
CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000FED Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000E83 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ChooseLev  . . . . . . . . . . .	P Near	 00000A16 _TEXT	Length= 000001C2 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000A6A _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawFirstScreen  . . . . . . . .	P Near	 000004E7 _TEXT	Length= 00000314 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsCollision  . . . . . . . . . .	P Near	 000002B8 _TEXT	Length= 00000042 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000002EE _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000002F4 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintWalls . . . . . . . . . . .	P Near	 00000234 _TEXT	Length= 00000084 Public STDCALL
  X00  . . . . . . . . . . . . .	L Near	 00000272 _TEXT	
  X01  . . . . . . . . . . . . .	L Near	 000002B7 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetDirection . . . . . . . . . .	P Near	 0000000C _TEXT	Length= 0000002B Public STDCALL
  R  . . . . . . . . . . . . . .	Byte	 bp + 00000008
  L  . . . . . . . . . . . . . .	Byte	 bp + 0000000C
  U  . . . . . . . . . . . . . .	Byte	 bp + 00000010
  D  . . . . . . . . . . . . . .	Byte	 bp + 00000014
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
createfood . . . . . . . . . . .	P Near	 00000D50 _TEXT	Length= 000000E1 Public STDCALL
drawHUD  . . . . . . . . . . . .	P Near	 00000402 _TEXT	Length= 000000E5 Public STDCALL
entername  . . . . . . . . . . .	P Near	 000009AC _TEXT	Length= 0000006A Public STDCALL
gameover . . . . . . . . . . . .	P Near	 00000BD8 _TEXT	Length= 00000178 Public STDCALL
grow . . . . . . . . . . . . . .	P Near	 00000160 _TEXT	Length= 000000D4 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000000C Public STDCALL
movesnake  . . . . . . . . . . .	P Near	 000002FA _TEXT	Length= 00000108 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000003D5 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 000003F1 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000401 _TEXT	
presskey . . . . . . . . . . . .	P Near	 00000037 _TEXT	Length= 00000129 Public STDCALL
  ddown  . . . . . . . . . . . .	L Near	 00000037 _TEXT	
  uup  . . . . . . . . . . . . .	L Near	 00000065 _TEXT	
  lleft  . . . . . . . . . . . .	L Near	 00000093 _TEXT	
  rright . . . . . . . . . . . .	L Near	 000000C1 _TEXT	
  rightpress . . . . . . . . . .	L Near	 000000EF _TEXT	
  leftpress  . . . . . . . . . .	L Near	 0000010B _TEXT	
  uppress  . . . . . . . . . . .	L Near	 00000127 _TEXT	
  downpress  . . . . . . . . . .	L Near	 00000143 _TEXT	
  breakk . . . . . . . . . . . .	L Near	 0000015F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
rule . . . . . . . . . . . . . .	P Near	 000007FB _TEXT	Length= 000001B1 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
startgame  . . . . . . . . . . .	P Near	 00000E31 _TEXT	Length= 00000052 Public STDCALL
  L0 . . . . . . . . . . . . . .	L Near	 00000E36 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000E45 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000E54 _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 00000E5E _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 000002BA _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000032F _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000003A4 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000003A6 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 000003A8 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 000003AA _DATA	
??0006 . . . . . . . . . . . . .	Byte	 000003B1 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 000003B9 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 000003BE _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000003C5 _DATA	
??000A . . . . . . . . . . . . .	Byte	 000003CC _DATA	
??000B . . . . . . . . . . . . .	Byte	 000003D1 _DATA	
??000C . . . . . . . . . . . . .	Byte	 000003D9 _DATA	
??000D . . . . . . . . . . . . .	Byte	 00000413 _DATA	
??000E . . . . . . . . . . . . .	Byte	 0000044D _DATA	
??000F . . . . . . . . . . . . .	Byte	 00000482 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 000004BD _DATA	
??0011 . . . . . . . . . . . . .	Byte	 000004F7 _DATA	
??0012 . . . . . . . . . . . . .	Byte	 00000532 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 0000058B _DATA	
??0014 . . . . . . . . . . . . .	Byte	 000005E8 _DATA	
??0015 . . . . . . . . . . . . .	Byte	 00000646 _DATA	
??0016 . . . . . . . . . . . . .	Byte	 000006A5 _DATA	
??0017 . . . . . . . . . . . . .	Byte	 00000705 _DATA	
??0018 . . . . . . . . . . . . .	Byte	 00000765 _DATA	
??0019 . . . . . . . . . . . . .	Byte	 000007C5 _DATA	
??001A . . . . . . . . . . . . .	Byte	 00000825 _DATA	
??001B . . . . . . . . . . . . .	Byte	 00000885 _DATA	
??001C . . . . . . . . . . . . .	Byte	 000008E5 _DATA	
??001D . . . . . . . . . . . . .	Byte	 00000945 _DATA	
??001E . . . . . . . . . . . . .	Byte	 000009A5 _DATA	
??001F . . . . . . . . . . . . .	Byte	 00000A05 _DATA	
??0020 . . . . . . . . . . . . .	Byte	 00000A65 _DATA	
??0021 . . . . . . . . . . . . .	Byte	 00000A79 _DATA	
??0022 . . . . . . . . . . . . .	Byte	 00000A81 _DATA	
??0023 . . . . . . . . . . . . .	Byte	 00000A98 _DATA	
??0024 . . . . . . . . . . . . .	Byte	 00000AAF _DATA	
??0025 . . . . . . . . . . . . .	Byte	 00000AD7 _DATA	
??0026 . . . . . . . . . . . . .	Byte	 00000B20 _DATA	
??0027 . . . . . . . . . . . . .	Byte	 00000B69 _DATA	
??0028 . . . . . . . . . . . . .	Byte	 00000BB3 _DATA	
??0029 . . . . . . . . . . . . .	Byte	 00000BFD _DATA	
??002A . . . . . . . . . . . . .	Byte	 00000C46 _DATA	
??002B . . . . . . . . . . . . .	Byte	 00000C61 _DATA	
??002C . . . . . . . . . . . . .	Byte	 00000C99 _DATA	
??002D . . . . . . . . . . . . .	Byte	 00000CAB _DATA	
??002E . . . . . . . . . . . . .	Byte	 00000CE2 _DATA	
??002F . . . . . . . . . . . . .	Byte	 00000D1B _DATA	
??0030 . . . . . . . . . . . . .	Byte	 00000D45 _DATA	
??0031 . . . . . . . . . . . . .	Byte	 00000D6E _DATA	
??0032 . . . . . . . . . . . . .	Byte	 00000D84 _DATA	
??0033 . . . . . . . . . . . . .	Byte	 00000D9C _DATA	
??0034 . . . . . . . . . . . . .	Byte	 00000DA8 _DATA	
??0035 . . . . . . . . . . . . .	Byte	 00000DB0 _DATA	
??0036 . . . . . . . . . . . . .	Byte	 00000DDC _DATA	
??0037 . . . . . . . . . . . . .	Byte	 00000DF0 _DATA	
??0038 . . . . . . . . . . . . .	Byte	 00000E03 _DATA	
??0039 . . . . . . . . . . . . .	Byte	 00000E18 _DATA	
??003A . . . . . . . . . . . . .	Byte	 00000E2D _DATA	
??003B . . . . . . . . . . . . .	Byte	 00000E40 _DATA	
??003C . . . . . . . . . . . . .	Byte	 00000E54 _DATA	
??003D . . . . . . . . . . . . .	Byte	 00000E9B _DATA	
??003E . . . . . . . . . . . . .	Byte	 00000EE2 _DATA	
??003F . . . . . . . . . . . . .	Byte	 00000F29 _DATA	
??0040 . . . . . . . . . . . . .	Byte	 00000F6F _DATA	
??0041 . . . . . . . . . . . . .	Byte	 00000FB6 _DATA	
??0042 . . . . . . . . . . . . .	Byte	 00000FC5 _DATA	
??0043 . . . . . . . . . . . . .	Byte	 00000FDB _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DOWN . . . . . . . . . . . . . .	Byte	 00000229 _DATA	
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LEFT . . . . . . . . . . . . . .	Byte	 00000226 _DATA	
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
RIGHT  . . . . . . . . . . . . .	Byte	 00000227 _DATA	
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
SnakeBody  . . . . . . . . . . .	AXIS	 00000006 _DATA	
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UP . . . . . . . . . . . . . . .	Byte	 00000228 _DATA	
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
again  . . . . . . . . . . . . .	Byte	 00000253 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
choice . . . . . . . . . . . . .	Byte	 00000209 _DATA	
currentX . . . . . . . . . . . .	Byte	 00000218 _DATA	
currentY . . . . . . . . . . . .	Byte	 00000219 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
excellent  . . . . . . . . . . .	Byte	 00000294 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
foodChar0  . . . . . . . . . . .	Byte	 0000021A _DATA	
foodChar1  . . . . . . . . . . .	Byte	 0000021B _DATA	
foodChar2  . . . . . . . . . . .	Byte	 0000021C _DATA	
foodChar3  . . . . . . . . . . .	Byte	 0000021D _DATA	
foodChar4  . . . . . . . . . . .	Byte	 0000021E _DATA	
foodPoint  . . . . . . . . . . .	AXIS	 00000004 _DATA	
foodnum  . . . . . . . . . . . .	Byte	 0000021F _DATA	
foodrandomnum  . . . . . . . . .	DWord	 00000220 _DATA	
good . . . . . . . . . . . . . .	Byte	 0000026D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
headIndex  . . . . . . . . . . .	Byte	 00000224 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxSize  . . . . . . . . . . . .	Number	 000000FFh   
maxX . . . . . . . . . . . . . .	Number	 00000073h   
maxY . . . . . . . . . . . . . .	Number	 0000001Ch   
playerName . . . . . . . . . . .	Byte	 0000020A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
snake  . . . . . . . . . . . . .	Byte	 00000208 _DATA	
speed  . . . . . . . . . . . . .	DWord	 00000204 _DATA	
tailIndex  . . . . . . . . . . .	Byte	 00000225 _DATA	
wallHor  . . . . . . . . . . . .	Text   	 "--------------------------------------------------------------------------------------------------------------------"
wallVert . . . . . . . . . . . .	Number	 0000007Ch   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wrong  . . . . . . . . . . . . .	Byte	 0000022A _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
